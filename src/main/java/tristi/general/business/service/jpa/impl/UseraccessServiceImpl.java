/*
 * Created on 6 Dec 2015 ( Time 04:09:00 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.jpa.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import tristi.general.bean.Useraccess;
import tristi.general.bean.jpa.UseraccessEntity;
import tristi.general.business.service.UseraccessService;
import tristi.general.business.service.jpa.mapping.UseraccessServiceMapper;
import tristi.general.data.repository.jpa.UseraccessJpaRepository;

/**
 * Implementation of UseraccessService
 */
@Component
@Transactional
public class UseraccessServiceImpl implements UseraccessService {

	@Resource
	private UseraccessJpaRepository useraccessJpaRepository;

	@Resource
	private UseraccessServiceMapper useraccessServiceMapper;
	
	@Override
	public Useraccess findById(String userid) {
		UseraccessEntity useraccessEntity = useraccessJpaRepository.findOne(userid);
		return useraccessServiceMapper.mapUseraccessEntityToUseraccess(useraccessEntity);
	}

	@Override
	public List<Useraccess> findAll() {
		Iterable<UseraccessEntity> entities = useraccessJpaRepository.findAll();
		List<Useraccess> beans = new ArrayList<Useraccess>();
		for(UseraccessEntity useraccessEntity : entities) {
			beans.add(useraccessServiceMapper.mapUseraccessEntityToUseraccess(useraccessEntity));
		}
		return beans;
	}

	@Override
	public Useraccess save(Useraccess useraccess) {
		return update(useraccess) ;
	}

	@Override
	public Useraccess create(Useraccess useraccess) {
		UseraccessEntity useraccessEntity = useraccessJpaRepository.findOne(useraccess.getUserid());
		if( useraccessEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		useraccessEntity = new UseraccessEntity();
		useraccessServiceMapper.mapUseraccessToUseraccessEntity(useraccess, useraccessEntity);
		UseraccessEntity useraccessEntitySaved = useraccessJpaRepository.save(useraccessEntity);
		return useraccessServiceMapper.mapUseraccessEntityToUseraccess(useraccessEntitySaved);
	}

	@Override
	public Useraccess update(Useraccess useraccess) {
		UseraccessEntity useraccessEntity = useraccessJpaRepository.findOne(useraccess.getUserid());
		useraccessServiceMapper.mapUseraccessToUseraccessEntity(useraccess, useraccessEntity);
		UseraccessEntity useraccessEntitySaved = useraccessJpaRepository.save(useraccessEntity);
		return useraccessServiceMapper.mapUseraccessEntityToUseraccess(useraccessEntitySaved);
	}

	@Override
	public void delete(String userid) {
		useraccessJpaRepository.delete(userid);
	}

	public UseraccessJpaRepository getUseraccessJpaRepository() {
		return useraccessJpaRepository;
	}

	public void setUseraccessJpaRepository(UseraccessJpaRepository useraccessJpaRepository) {
		this.useraccessJpaRepository = useraccessJpaRepository;
	}

	public UseraccessServiceMapper getUseraccessServiceMapper() {
		return useraccessServiceMapper;
	}

	public void setUseraccessServiceMapper(UseraccessServiceMapper useraccessServiceMapper) {
		this.useraccessServiceMapper = useraccessServiceMapper;
	}

	@Override
	public boolean exists(String userid) {
		return useraccessJpaRepository.exists(userid);
	}

	@Override
	public long count() {
		return useraccessJpaRepository.count();
	}

}
