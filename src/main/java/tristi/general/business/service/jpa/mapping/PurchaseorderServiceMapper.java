/*
 * Created on 6 Dec 2015 ( Time 04:08:59 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.jpa.mapping;

import java.util.UUID;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import tristi.general.bean.Purchaseorder;
import tristi.general.bean.jpa.PurchaseorderEntity;
import tristi.general.bean.jpa.SupplierEntity;
import tristi.general.bean.jpa.PaymentformEntity;
import tristi.general.bean.jpa.AccountbankEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class PurchaseorderServiceMapper extends AbstractServiceMapper {

    /**
     * ModelMapper : bean to bean mapping library.
     */
    private ModelMapper modelMapper;

    /**
     * Constructor.
     */
    public PurchaseorderServiceMapper() {
        modelMapper = new ModelMapper();
        modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
    }

    /**
     * Mapping from 'PurchaseorderEntity' to 'Purchaseorder'
     *
     * @param purchaseorderEntity
     * @return Purchaseorder
     */
    public Purchaseorder mapPurchaseorderEntityToPurchaseorder(PurchaseorderEntity purchaseorderEntity) {
        if (purchaseorderEntity == null) {
            return null;
        }

        //--- Generic mapping 
        Purchaseorder purchaseorder = map(purchaseorderEntity, Purchaseorder.class);

        //--- Link mapping ( link to Supplier )
        if (purchaseorderEntity.getSupplier() != null) {
            purchaseorder.setPurchaseorderSupplierid(purchaseorderEntity.getSupplier().getSupplierid().toString());
        }
        //--- Link mapping ( link to Paymentform )
        if (purchaseorderEntity.getPaymentform() != null) {
            purchaseorder.setPurchaseorderPaymentformid(purchaseorderEntity.getPaymentform().getPaymentformid().toString());
        }
        //--- Link mapping ( link to Accountbank )
        if (purchaseorderEntity.getAccountbank() != null) {
            purchaseorder.setPurchaseorderAccountbankid(purchaseorderEntity.getAccountbank().getAccountbankid().toString());
        }
        return purchaseorder;
    }

    /**
     * Mapping from 'Purchaseorder' to 'PurchaseorderEntity'
     *
     * @param purchaseorder
     * @param purchaseorderEntity
     */
    public void mapPurchaseorderToPurchaseorderEntity(Purchaseorder purchaseorder, PurchaseorderEntity purchaseorderEntity) {
        if (purchaseorder == null) {
            return;
        }

        //--- Generic mapping 
        map(purchaseorder, purchaseorderEntity);

        //--- Link mapping ( link : purchaseorder )
        if (hasLinkToSupplier(purchaseorder)) {
            SupplierEntity supplier1 = new SupplierEntity();
            supplier1.setSupplierid(UUID.fromString(purchaseorder.getPurchaseorderSupplierid()));
            purchaseorderEntity.setSupplier(supplier1);
        } else {
            purchaseorderEntity.setSupplier(null);
        }

        //--- Link mapping ( link : purchaseorder )
        if (hasLinkToPaymentform(purchaseorder)) {
            PaymentformEntity paymentform2 = new PaymentformEntity();
            paymentform2.setPaymentformid(UUID.fromString(purchaseorder.getPurchaseorderPaymentformid()));
            purchaseorderEntity.setPaymentform(paymentform2);
        } else {
            purchaseorderEntity.setPaymentform(null);
        }

        //--- Link mapping ( link : purchaseorder )
        if (hasLinkToAccountbank(purchaseorder)) {
            AccountbankEntity accountbank3 = new AccountbankEntity();
            accountbank3.setAccountbankid(UUID.fromString(purchaseorder.getPurchaseorderAccountbankid()));
            purchaseorderEntity.setAccountbank(accountbank3);
        } else {
            purchaseorderEntity.setAccountbank(null);
        }

    }

    /**
     * Verify that Supplier id is valid.
     *
     * @param Supplier Supplier
     * @return boolean
     */
    private boolean hasLinkToSupplier(Purchaseorder purchaseorder) {
        return purchaseorder.getPurchaseorderSupplierid() != null;
    }

    /**
     * Verify that Paymentform id is valid.
     *
     * @param Paymentform Paymentform
     * @return boolean
     */
    private boolean hasLinkToPaymentform(Purchaseorder purchaseorder) {
        return purchaseorder.getPurchaseorderPaymentformid() != null;
    }

    /**
     * Verify that Accountbank id is valid.
     *
     * @param Accountbank Accountbank
     * @return boolean
     */
    private boolean hasLinkToAccountbank(Purchaseorder purchaseorder) {
        return purchaseorder.getPurchaseorderAccountbankid() != null;
    }

    /**
     * {@inheritDoc}
     *
     * @return ModelMapper
     */
    @Override
    protected ModelMapper getModelMapper() {
        return modelMapper;
    }

    protected void setModelMapper(ModelMapper modelMapper) {
        this.modelMapper = modelMapper;
    }

}
