/*
 * Created on 6 Dec 2015 ( Time 04:08:59 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.jpa.mapping;

import java.util.UUID;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import tristi.general.bean.Salesorder;
import tristi.general.bean.jpa.SalesorderEntity;
import tristi.general.bean.jpa.PaymentformEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class SalesorderServiceMapper extends AbstractServiceMapper {

    /**
     * ModelMapper : bean to bean mapping library.
     */
    private ModelMapper modelMapper;

    /**
     * Constructor.
     */
    public SalesorderServiceMapper() {
        modelMapper = new ModelMapper();
        modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
    }

    /**
     * Mapping from 'SalesorderEntity' to 'Salesorder'
     *
     * @param salesorderEntity
     * @return Salesorder
     */
    public Salesorder mapSalesorderEntityToSalesorder(SalesorderEntity salesorderEntity) {
        if (salesorderEntity == null) {
            return null;
        }

        //--- Generic mapping 
        Salesorder salesorder = map(salesorderEntity, Salesorder.class);

        //--- Link mapping ( link to Paymentform )
        if (salesorderEntity.getPaymentform() != null) {
            salesorder.setPaymentformid(salesorderEntity.getPaymentform().getPaymentformid().toString());
        }
        return salesorder;
    }

    /**
     * Mapping from 'Salesorder' to 'SalesorderEntity'
     *
     * @param salesorder
     * @param salesorderEntity
     */
    public void mapSalesorderToSalesorderEntity(Salesorder salesorder, SalesorderEntity salesorderEntity) {
        if (salesorder == null) {
            return;
        }

        //--- Generic mapping 
        map(salesorder, salesorderEntity);

        //--- Link mapping ( link : salesorder )
        if (hasLinkToPaymentform(salesorder)) {
            PaymentformEntity paymentform1 = new PaymentformEntity();
            paymentform1.setPaymentformid(UUID.fromString(salesorder.getPaymentformid()));
            salesorderEntity.setPaymentform(paymentform1);
        } else {
            salesorderEntity.setPaymentform(null);
        }

    }

    /**
     * Verify that Paymentform id is valid.
     *
     * @param Paymentform Paymentform
     * @return boolean
     */
    private boolean hasLinkToPaymentform(Salesorder salesorder) {
        return salesorder.getPaymentformid() != null;
    }

    /**
     * {@inheritDoc}
     *
     * @return ModelMapper
     */
    @Override
    protected ModelMapper getModelMapper() {
        return modelMapper;
    }

    protected void setModelMapper(ModelMapper modelMapper) {
        this.modelMapper = modelMapper;
    }

}
