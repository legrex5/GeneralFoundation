/*
 * Created on 6 Dec 2015 ( Time 04:08:59 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.jpa.mapping;

import java.util.UUID;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import tristi.general.bean.Supplierproduct;
import tristi.general.bean.jpa.SupplierproductEntity;
import tristi.general.bean.jpa.SupplierEntity;
import tristi.general.bean.jpa.UseraccessEntity;
import tristi.general.bean.jpa.ProductEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class SupplierproductServiceMapper extends AbstractServiceMapper {

    /**
     * ModelMapper : bean to bean mapping library.
     */
    private ModelMapper modelMapper;

    /**
     * Constructor.
     */
    public SupplierproductServiceMapper() {
        modelMapper = new ModelMapper();
        modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
    }

    /**
     * Mapping from 'SupplierproductEntity' to 'Supplierproduct'
     *
     * @param supplierproductEntity
     * @return Supplierproduct
     */
    public Supplierproduct mapSupplierproductEntityToSupplierproduct(SupplierproductEntity supplierproductEntity) {
        if (supplierproductEntity == null) {
            return null;
        }

        //--- Generic mapping 
        Supplierproduct supplierproduct = map(supplierproductEntity, Supplierproduct.class);

        //--- Link mapping ( link to Supplier )
        if (supplierproductEntity.getSupplier() != null) {
            supplierproduct.setSupplierproductSupplierid(supplierproductEntity.getSupplier().getSupplierid().toString());
        }
        //--- Link mapping ( link to Useraccess )
        if (supplierproductEntity.getUseraccess() != null) {
            supplierproduct.setSupplierproductUserid(supplierproductEntity.getUseraccess().getUserid().toString());
        }
        //--- Link mapping ( link to Product )
        if (supplierproductEntity.getProduct() != null) {
            supplierproduct.setSupplierproductProductid(supplierproductEntity.getProduct().getProductid().toString());
        }
        return supplierproduct;
    }

    /**
     * Mapping from 'Supplierproduct' to 'SupplierproductEntity'
     *
     * @param supplierproduct
     * @param supplierproductEntity
     */
    public void mapSupplierproductToSupplierproductEntity(Supplierproduct supplierproduct, SupplierproductEntity supplierproductEntity) {
        if (supplierproduct == null) {
            return;
        }

        //--- Generic mapping 
        map(supplierproduct, supplierproductEntity);

        //--- Link mapping ( link : supplierproduct )
        if (hasLinkToSupplier(supplierproduct)) {
            SupplierEntity supplier1 = new SupplierEntity();
            supplier1.setSupplierid(UUID.fromString(supplierproduct.getSupplierproductSupplierid()));
            supplierproductEntity.setSupplier(supplier1);
        } else {
            supplierproductEntity.setSupplier(null);
        }

        //--- Link mapping ( link : supplierproduct )
        if (hasLinkToUseraccess(supplierproduct)) {
            UseraccessEntity useraccess2 = new UseraccessEntity();
            useraccess2.setUserid(UUID.fromString(supplierproduct.getSupplierproductUserid()));
            supplierproductEntity.setUseraccess(useraccess2);
        } else {
            supplierproductEntity.setUseraccess(null);
        }

        //--- Link mapping ( link : supplierproduct )
        if (hasLinkToProduct(supplierproduct)) {
            ProductEntity product3 = new ProductEntity();
            product3.setProductid(UUID.fromString(supplierproduct.getSupplierproductProductid()));
            supplierproductEntity.setProduct(product3);
        } else {
            supplierproductEntity.setProduct(null);
        }

    }

    /**
     * Verify that Supplier id is valid.
     *
     * @param Supplier Supplier
     * @return boolean
     */
    private boolean hasLinkToSupplier(Supplierproduct supplierproduct) {
        return supplierproduct.getSupplierproductSupplierid() != null;
    }

    /**
     * Verify that Useraccess id is valid.
     *
     * @param Useraccess Useraccess
     * @return boolean
     */
    private boolean hasLinkToUseraccess(Supplierproduct supplierproduct) {
        return supplierproduct.getSupplierproductUserid() != null;
    }

    /**
     * Verify that Product id is valid.
     *
     * @param Product Product
     * @return boolean
     */
    private boolean hasLinkToProduct(Supplierproduct supplierproduct) {
        return supplierproduct.getSupplierproductProductid() != null;
    }

    /**
     * {@inheritDoc}
     *
     * @return ModelMapper
     */
    @Override
    protected ModelMapper getModelMapper() {
        return modelMapper;
    }

    protected void setModelMapper(ModelMapper modelMapper) {
        this.modelMapper = modelMapper;
    }

}
