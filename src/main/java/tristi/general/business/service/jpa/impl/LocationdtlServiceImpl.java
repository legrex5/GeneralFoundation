/*
 * Created on 6 Dec 2015 ( Time 04:08:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.jpa.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import tristi.general.bean.Locationdtl;
import tristi.general.bean.jpa.LocationdtlEntity;
import tristi.general.business.service.LocationdtlService;
import tristi.general.business.service.jpa.mapping.LocationdtlServiceMapper;
import tristi.general.data.repository.jpa.LocationdtlJpaRepository;

/**
 * Implementation of LocationdtlService
 */
@Component
@Transactional
public class LocationdtlServiceImpl implements LocationdtlService {

	@Resource
	private LocationdtlJpaRepository locationdtlJpaRepository;

	@Resource
	private LocationdtlServiceMapper locationdtlServiceMapper;
	
	@Override
	public Locationdtl findById(String locationdtlid) {
		LocationdtlEntity locationdtlEntity = locationdtlJpaRepository.findOne(locationdtlid);
		return locationdtlServiceMapper.mapLocationdtlEntityToLocationdtl(locationdtlEntity);
	}

	@Override
	public List<Locationdtl> findAll() {
		Iterable<LocationdtlEntity> entities = locationdtlJpaRepository.findAll();
		List<Locationdtl> beans = new ArrayList<Locationdtl>();
		for(LocationdtlEntity locationdtlEntity : entities) {
			beans.add(locationdtlServiceMapper.mapLocationdtlEntityToLocationdtl(locationdtlEntity));
		}
		return beans;
	}

	@Override
	public Locationdtl save(Locationdtl locationdtl) {
		return update(locationdtl) ;
	}

	@Override
	public Locationdtl create(Locationdtl locationdtl) {
		LocationdtlEntity locationdtlEntity = locationdtlJpaRepository.findOne(locationdtl.getLocationdtlid());
		if( locationdtlEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		locationdtlEntity = new LocationdtlEntity();
		locationdtlServiceMapper.mapLocationdtlToLocationdtlEntity(locationdtl, locationdtlEntity);
		LocationdtlEntity locationdtlEntitySaved = locationdtlJpaRepository.save(locationdtlEntity);
		return locationdtlServiceMapper.mapLocationdtlEntityToLocationdtl(locationdtlEntitySaved);
	}

	@Override
	public Locationdtl update(Locationdtl locationdtl) {
		LocationdtlEntity locationdtlEntity = locationdtlJpaRepository.findOne(locationdtl.getLocationdtlid());
		locationdtlServiceMapper.mapLocationdtlToLocationdtlEntity(locationdtl, locationdtlEntity);
		LocationdtlEntity locationdtlEntitySaved = locationdtlJpaRepository.save(locationdtlEntity);
		return locationdtlServiceMapper.mapLocationdtlEntityToLocationdtl(locationdtlEntitySaved);
	}

	@Override
	public void delete(String locationdtlid) {
		locationdtlJpaRepository.delete(locationdtlid);
	}

	public LocationdtlJpaRepository getLocationdtlJpaRepository() {
		return locationdtlJpaRepository;
	}

	public void setLocationdtlJpaRepository(LocationdtlJpaRepository locationdtlJpaRepository) {
		this.locationdtlJpaRepository = locationdtlJpaRepository;
	}

	public LocationdtlServiceMapper getLocationdtlServiceMapper() {
		return locationdtlServiceMapper;
	}

	public void setLocationdtlServiceMapper(LocationdtlServiceMapper locationdtlServiceMapper) {
		this.locationdtlServiceMapper = locationdtlServiceMapper;
	}

	@Override
	public boolean exists(String locationdtlid) {
		return locationdtlJpaRepository.exists(locationdtlid);
	}

	@Override
	public long count() {
		return locationdtlJpaRepository.count();
	}

}
