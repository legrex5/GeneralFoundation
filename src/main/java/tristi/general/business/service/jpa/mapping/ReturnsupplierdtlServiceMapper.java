/*
 * Created on 6 Dec 2015 ( Time 04:08:59 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.jpa.mapping;

import java.util.UUID;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import tristi.general.bean.Returnsupplierdtl;
import tristi.general.bean.jpa.ReturnsupplierdtlEntity;
import tristi.general.bean.jpa.ReturnsupplierEntity;
import tristi.general.bean.jpa.DetailexpiredEntity;
import tristi.general.bean.jpa.ProductuomEntity;
import tristi.general.bean.jpa.UseraccessEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class ReturnsupplierdtlServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public ReturnsupplierdtlServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'ReturnsupplierdtlEntity' to 'Returnsupplierdtl'
	 * @param returnsupplierdtlEntity
     * @return Returnsupplierdtl
	 */
	public Returnsupplierdtl mapReturnsupplierdtlEntityToReturnsupplierdtl(ReturnsupplierdtlEntity returnsupplierdtlEntity) {
		if(returnsupplierdtlEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Returnsupplierdtl returnsupplierdtl = map(returnsupplierdtlEntity, Returnsupplierdtl.class);

		//--- Link mapping ( link to Returnsupplier )
		if(returnsupplierdtlEntity.getReturnsupplier() != null) {
			returnsupplierdtl.setReturndtlReturnsupplierid(returnsupplierdtlEntity.getReturnsupplier().getReturnsupplierid().toString());
		}
		//--- Link mapping ( link to Detailexpired )
		if(returnsupplierdtlEntity.getDetailexpired() != null) {
			returnsupplierdtl.setReturndtlDetailexpiredid(returnsupplierdtlEntity.getDetailexpired().getDetailexpiredid().toString());
		}
		//--- Link mapping ( link to Productuom )
		if(returnsupplierdtlEntity.getProductuom() != null) {
			returnsupplierdtl.setReturndtlProductuomid(returnsupplierdtlEntity.getProductuom().getProductuomid().toString());
		}
		//--- Link mapping ( link to Useraccess )
		if(returnsupplierdtlEntity.getUseraccess() != null) {
			returnsupplierdtl.setReturndtlUserid(returnsupplierdtlEntity.getUseraccess().getUserid().toString());
		}
		return returnsupplierdtl;
	}
	
	/**
	 * Mapping from 'Returnsupplierdtl' to 'ReturnsupplierdtlEntity'
	 * @param returnsupplierdtl
	 * @param returnsupplierdtlEntity
	 */
	public void mapReturnsupplierdtlToReturnsupplierdtlEntity(Returnsupplierdtl returnsupplierdtl, ReturnsupplierdtlEntity returnsupplierdtlEntity) {
		if(returnsupplierdtl == null) {
			return;
		}

		//--- Generic mapping 
		map(returnsupplierdtl, returnsupplierdtlEntity);

		//--- Link mapping ( link : returnsupplierdtl )
		if( hasLinkToReturnsupplier(returnsupplierdtl) ) {
			ReturnsupplierEntity returnsupplier1 = new ReturnsupplierEntity();
			returnsupplier1.setReturnsupplierid( UUID.fromString(returnsupplierdtl.getReturndtlReturnsupplierid()));
			returnsupplierdtlEntity.setReturnsupplier( returnsupplier1 );
		} else {
			returnsupplierdtlEntity.setReturnsupplier( null );
		}

		//--- Link mapping ( link : returnsupplierdtl )
		if( hasLinkToDetailexpired(returnsupplierdtl) ) {
			DetailexpiredEntity detailexpired2 = new DetailexpiredEntity();
			detailexpired2.setDetailexpiredid( UUID.fromString(returnsupplierdtl.getReturndtlDetailexpiredid()));
			returnsupplierdtlEntity.setDetailexpired( detailexpired2 );
		} else {
			returnsupplierdtlEntity.setDetailexpired( null );
		}

		//--- Link mapping ( link : returnsupplierdtl )
		if( hasLinkToProductuom(returnsupplierdtl) ) {
			ProductuomEntity productuom3 = new ProductuomEntity();
			productuom3.setProductuomid( UUID.fromString(returnsupplierdtl.getReturndtlProductuomid()));
			returnsupplierdtlEntity.setProductuom( productuom3 );
		} else {
			returnsupplierdtlEntity.setProductuom( null );
		}

		//--- Link mapping ( link : returnsupplierdtl )
		if( hasLinkToUseraccess(returnsupplierdtl) ) {
			UseraccessEntity useraccess4 = new UseraccessEntity();
			useraccess4.setUserid( UUID.fromString(returnsupplierdtl.getReturndtlUserid()));
			returnsupplierdtlEntity.setUseraccess( useraccess4 );
		} else {
			returnsupplierdtlEntity.setUseraccess( null );
		}

	}
	
	/**
	 * Verify that Returnsupplier id is valid.
	 * @param Returnsupplier Returnsupplier
	 * @return boolean
	 */
	private boolean hasLinkToReturnsupplier(Returnsupplierdtl returnsupplierdtl) {
		return returnsupplierdtl.getReturndtlReturnsupplierid() != null;
	}

	/**
	 * Verify that Detailexpired id is valid.
	 * @param Detailexpired Detailexpired
	 * @return boolean
	 */
	private boolean hasLinkToDetailexpired(Returnsupplierdtl returnsupplierdtl) {
		return returnsupplierdtl.getReturndtlDetailexpiredid() != null;
	}

	/**
	 * Verify that Productuom id is valid.
	 * @param Productuom Productuom
	 * @return boolean
	 */
	private boolean hasLinkToProductuom(Returnsupplierdtl returnsupplierdtl) {
		return returnsupplierdtl.getReturndtlProductuomid() != null;
	}

	/**
	 * Verify that Useraccess id is valid.
	 * @param Useraccess Useraccess
	 * @return boolean
	 */
	private boolean hasLinkToUseraccess(Returnsupplierdtl returnsupplierdtl) {
		return returnsupplierdtl.getReturndtlUserid() != null;
	}

	/**
	 * {@inheritDoc}
     * @return ModelMapper
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}