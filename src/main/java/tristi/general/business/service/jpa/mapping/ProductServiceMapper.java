/*
 * Created on 6 Dec 2015 ( Time 04:08:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.jpa.mapping;

import java.util.UUID;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import tristi.general.bean.Product;
import tristi.general.bean.jpa.ProductEntity;
import tristi.general.bean.jpa.UseraccessEntity;
import tristi.general.bean.jpa.TypeEntity;
import tristi.general.bean.jpa.CategoryEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class ProductServiceMapper extends AbstractServiceMapper {

    /**
     * ModelMapper : bean to bean mapping library.
     */
    private ModelMapper modelMapper;

    /**
     * Constructor.
     */
    public ProductServiceMapper() {
        modelMapper = new ModelMapper();
        modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
    }

    /**
     * Mapping from 'ProductEntity' to 'Product'
     *
     * @param productEntity
     * @return Product
     */
    public Product mapProductEntityToProduct(ProductEntity productEntity) {
        if (productEntity == null) {
            return null;
        }

        //--- Generic mapping 
        Product product = map(productEntity, Product.class);

        //--- Link mapping ( link to Useraccess )
        if (productEntity.getUseraccess() != null) {
            product.setProductUserid(productEntity.getUseraccess().getUserid().toString());
        }
        //--- Link mapping ( link to Type )
        if (productEntity.getType() != null) {
            product.setProductTypeid(productEntity.getType().getTypeid().toString());
        }
        //--- Link mapping ( link to Category )
        if (productEntity.getCategory() != null) {
            product.setProductCategoryid(productEntity.getCategory().getCategoryid().toString());
        }
        return product;
    }

    /**
     * Mapping from 'Product' to 'ProductEntity'
     *
     * @param product
     * @param productEntity
     */
    public void mapProductToProductEntity(Product product, ProductEntity productEntity) {
        if (product == null) {
            return;
        }

        //--- Generic mapping 
        map(product, productEntity);

        //--- Link mapping ( link : product )
        if (hasLinkToUseraccess(product)) {
            UseraccessEntity useraccess1 = new UseraccessEntity();
            useraccess1.setUserid(UUID.fromString(product.getProductUserid()));
            productEntity.setUseraccess(useraccess1);
        } else {
            productEntity.setUseraccess(null);
        }

        //--- Link mapping ( link : product )
        if (hasLinkToType(product)) {
            TypeEntity type2 = new TypeEntity();
            type2.setTypeid(UUID.fromString(product.getProductTypeid()));
            productEntity.setType(type2);
        } else {
            productEntity.setType(null);
        }

        //--- Link mapping ( link : product )
        if (hasLinkToCategory(product)) {
            CategoryEntity category3 = new CategoryEntity();
            category3.setCategoryid(UUID.fromString(product.getProductCategoryid()));
            productEntity.setCategory(category3);
        } else {
            productEntity.setCategory(null);
        }

    }

    /**
     * Verify that Useraccess id is valid.
     *
     * @param Useraccess Useraccess
     * @return boolean
     */
    private boolean hasLinkToUseraccess(Product product) {
        return product.getProductUserid() != null;
    }

    /**
     * Verify that Type id is valid.
     *
     * @param Type Type
     * @return boolean
     */
    private boolean hasLinkToType(Product product) {
        return product.getProductTypeid() != null;
    }

    /**
     * Verify that Category id is valid.
     *
     * @param Category Category
     * @return boolean
     */
    private boolean hasLinkToCategory(Product product) {
        return product.getProductCategoryid() != null;
    }

    /**
     * {@inheritDoc}
     *
     * @return ModelMapper
     */
    @Override
    protected ModelMapper getModelMapper() {
        return modelMapper;
    }

    protected void setModelMapper(ModelMapper modelMapper) {
        this.modelMapper = modelMapper;
    }

}
