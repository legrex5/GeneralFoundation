/*
 * Created on 6 Dec 2015 ( Time 04:08:59 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.jpa.mapping;

import java.util.UUID;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import tristi.general.bean.Salesorderdtl;
import tristi.general.bean.jpa.SalesorderdtlEntity;
import tristi.general.bean.jpa.UseraccessEntity;
import tristi.general.bean.jpa.DetailexpiredEntity;
import tristi.general.bean.jpa.ProductuomEntity;
import tristi.general.bean.jpa.SalesorderEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class SalesorderdtlServiceMapper extends AbstractServiceMapper {

    /**
     * ModelMapper : bean to bean mapping library.
     */
    private ModelMapper modelMapper;

    /**
     * Constructor.
     */
    public SalesorderdtlServiceMapper() {
        modelMapper = new ModelMapper();
        modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
    }

    /**
     * Mapping from 'SalesorderdtlEntity' to 'Salesorderdtl'
     *
     * @param salesorderdtlEntity
     * @return Salesorderdtl
     */
    public Salesorderdtl mapSalesorderdtlEntityToSalesorderdtl(SalesorderdtlEntity salesorderdtlEntity) {
        if (salesorderdtlEntity == null) {
            return null;
        }

        //--- Generic mapping 
        Salesorderdtl salesorderdtl = map(salesorderdtlEntity, Salesorderdtl.class);

        //--- Link mapping ( link to Useraccess )
        if (salesorderdtlEntity.getUseraccess() != null) {
            salesorderdtl.setUserid(salesorderdtlEntity.getUseraccess().getUserid().toString());
        }
        //--- Link mapping ( link to Detailexpired )
        if (salesorderdtlEntity.getDetailexpired() != null) {
            salesorderdtl.setDetailexpiredid(salesorderdtlEntity.getDetailexpired().getDetailexpiredid().toString());
        }
        //--- Link mapping ( link to Productuom )
        if (salesorderdtlEntity.getProductuom() != null) {
            salesorderdtl.setProductuomid(salesorderdtlEntity.getProductuom().getProductuomid().toString());
        }
        //--- Link mapping ( link to Salesorder )
        if (salesorderdtlEntity.getSalesorder() != null) {
            salesorderdtl.setSalesorderid(salesorderdtlEntity.getSalesorder().getSalesorderid().toString());
        }
        return salesorderdtl;
    }

    /**
     * Mapping from 'Salesorderdtl' to 'SalesorderdtlEntity'
     *
     * @param salesorderdtl
     * @param salesorderdtlEntity
     */
    public void mapSalesorderdtlToSalesorderdtlEntity(Salesorderdtl salesorderdtl, SalesorderdtlEntity salesorderdtlEntity) {
        if (salesorderdtl == null) {
            return;
        }

        //--- Generic mapping 
        map(salesorderdtl, salesorderdtlEntity);

        //--- Link mapping ( link : salesorderdtl )
        if (hasLinkToUseraccess(salesorderdtl)) {
            UseraccessEntity useraccess1 = new UseraccessEntity();
            useraccess1.setUserid(UUID.fromString(salesorderdtl.getUserid()));
            salesorderdtlEntity.setUseraccess(useraccess1);
        } else {
            salesorderdtlEntity.setUseraccess(null);
        }

        //--- Link mapping ( link : salesorderdtl )
        if (hasLinkToDetailexpired(salesorderdtl)) {
            DetailexpiredEntity detailexpired2 = new DetailexpiredEntity();
            detailexpired2.setDetailexpiredid(UUID.fromString(salesorderdtl.getDetailexpiredid()));
            salesorderdtlEntity.setDetailexpired(detailexpired2);
        } else {
            salesorderdtlEntity.setDetailexpired(null);
        }

        //--- Link mapping ( link : salesorderdtl )
        if (hasLinkToProductuom(salesorderdtl)) {
            ProductuomEntity productuom3 = new ProductuomEntity();
            productuom3.setProductuomid(UUID.fromString(salesorderdtl.getProductuomid()));
            salesorderdtlEntity.setProductuom(productuom3);
        } else {
            salesorderdtlEntity.setProductuom(null);
        }

        //--- Link mapping ( link : salesorderdtl )
        if (hasLinkToSalesorder(salesorderdtl)) {
            SalesorderEntity salesorder4 = new SalesorderEntity();
            salesorder4.setSalesorderid(UUID.fromString(salesorderdtl.getSalesorderid()));
            salesorderdtlEntity.setSalesorder(salesorder4);
        } else {
            salesorderdtlEntity.setSalesorder(null);
        }

    }

    /**
     * Verify that Useraccess id is valid.
     *
     * @param Useraccess Useraccess
     * @return boolean
     */
    private boolean hasLinkToUseraccess(Salesorderdtl salesorderdtl) {
        return salesorderdtl.getUserid() != null;
    }

    /**
     * Verify that Detailexpired id is valid.
     *
     * @param Detailexpired Detailexpired
     * @return boolean
     */
    private boolean hasLinkToDetailexpired(Salesorderdtl salesorderdtl) {
        return salesorderdtl.getDetailexpiredid() != null;
    }

    /**
     * Verify that Productuom id is valid.
     *
     * @param Productuom Productuom
     * @return boolean
     */
    private boolean hasLinkToProductuom(Salesorderdtl salesorderdtl) {
        return salesorderdtl.getProductuomid() != null;
    }

    /**
     * Verify that Salesorder id is valid.
     *
     * @param Salesorder Salesorder
     * @return boolean
     */
    private boolean hasLinkToSalesorder(Salesorderdtl salesorderdtl) {
        return salesorderdtl.getSalesorderid() != null;
    }

    /**
     * {@inheritDoc}
     *
     * @return ModelMapper
     */
    @Override
    protected ModelMapper getModelMapper() {
        return modelMapper;
    }

    protected void setModelMapper(ModelMapper modelMapper) {
        this.modelMapper = modelMapper;
    }

}
