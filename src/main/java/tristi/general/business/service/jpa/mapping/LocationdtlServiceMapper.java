/*
 * Created on 6 Dec 2015 ( Time 04:08:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.jpa.mapping;

import java.util.UUID;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import tristi.general.bean.Locationdtl;
import tristi.general.bean.jpa.LocationdtlEntity;
import tristi.general.bean.jpa.UseraccessEntity;
import tristi.general.bean.jpa.LocationEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class LocationdtlServiceMapper extends AbstractServiceMapper {

    /**
     * ModelMapper : bean to bean mapping library.
     */
    private ModelMapper modelMapper;

    /**
     * Constructor.
     */
    public LocationdtlServiceMapper() {
        modelMapper = new ModelMapper();
        modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
    }

    /**
     * Mapping from 'LocationdtlEntity' to 'Locationdtl'
     *
     * @param locationdtlEntity
     * @return Locationdtl
     */
    public Locationdtl mapLocationdtlEntityToLocationdtl(LocationdtlEntity locationdtlEntity) {
        if (locationdtlEntity == null) {
            return null;
        }

        //--- Generic mapping 
        Locationdtl locationdtl = map(locationdtlEntity, Locationdtl.class);

        //--- Link mapping ( link to Useraccess )
        if (locationdtlEntity.getUseraccess() != null) {
            locationdtl.setLocationdtlUserid(locationdtlEntity.getUseraccess().getUserid().toString());
        }
        //--- Link mapping ( link to Location )
        if (locationdtlEntity.getLocation() != null) {
            locationdtl.setLocationdtlLocationid(locationdtlEntity.getLocation().getLocationid().toString());
        }
        return locationdtl;
    }

    /**
     * Mapping from 'Locationdtl' to 'LocationdtlEntity'
     *
     * @param locationdtl
     * @param locationdtlEntity
     */
    public void mapLocationdtlToLocationdtlEntity(Locationdtl locationdtl, LocationdtlEntity locationdtlEntity) {
        if (locationdtl == null) {
            return;
        }

        //--- Generic mapping 
        map(locationdtl, locationdtlEntity);

        //--- Link mapping ( link : locationdtl )
        if (hasLinkToUseraccess(locationdtl)) {
            UseraccessEntity useraccess1 = new UseraccessEntity();
            useraccess1.setUserid(UUID.fromString(locationdtl.getLocationdtlUserid()));
            locationdtlEntity.setUseraccess(useraccess1);
        } else {
            locationdtlEntity.setUseraccess(null);
        }

        //--- Link mapping ( link : locationdtl )
        if (hasLinkToLocation(locationdtl)) {
            LocationEntity location2 = new LocationEntity();
            location2.setLocationid(UUID.fromString(locationdtl.getLocationdtlLocationid()));
            locationdtlEntity.setLocation(location2);
        } else {
            locationdtlEntity.setLocation(null);
        }

    }

    /**
     * Verify that Useraccess id is valid.
     *
     * @param Useraccess Useraccess
     * @return boolean
     */
    private boolean hasLinkToUseraccess(Locationdtl locationdtl) {
        return locationdtl.getLocationdtlUserid() != null;
    }

    /**
     * Verify that Location id is valid.
     *
     * @param Location Location
     * @return boolean
     */
    private boolean hasLinkToLocation(Locationdtl locationdtl) {
        return locationdtl.getLocationdtlLocationid() != null;
    }

    /**
     * {@inheritDoc}
     *
     * @return ModelMapper
     */
    @Override
    protected ModelMapper getModelMapper() {
        return modelMapper;
    }

    protected void setModelMapper(ModelMapper modelMapper) {
        this.modelMapper = modelMapper;
    }

}
