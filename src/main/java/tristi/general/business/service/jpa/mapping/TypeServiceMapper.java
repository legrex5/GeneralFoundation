/*
 * Created on 6 Dec 2015 ( Time 04:09:00 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.jpa.mapping;

import java.util.UUID;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import tristi.general.bean.Type;
import tristi.general.bean.jpa.TypeEntity;
import tristi.general.bean.jpa.UseraccessEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class TypeServiceMapper extends AbstractServiceMapper {

    /**
     * ModelMapper : bean to bean mapping library.
     */
    private ModelMapper modelMapper;

    /**
     * Constructor.
     */
    public TypeServiceMapper() {
        modelMapper = new ModelMapper();
        modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
    }

    /**
     * Mapping from 'TypeEntity' to 'Type'
     *
     * @param typeEntity
     * @return Type
     */
    public Type mapTypeEntityToType(TypeEntity typeEntity) {
        if (typeEntity == null) {
            return null;
        }

        //--- Generic mapping 
        Type type = map(typeEntity, Type.class);

        //--- Link mapping ( link to Useraccess )
        if (typeEntity.getUseraccess() != null) {
            type.setTypeUserid(typeEntity.getUseraccess().getUserid().toString());
        }
        return type;
    }

    /**
     * Mapping from 'Type' to 'TypeEntity'
     *
     * @param type
     * @param typeEntity
     */
    public void mapTypeToTypeEntity(Type type, TypeEntity typeEntity) {
        if (type == null) {
            return;
        }

        //--- Generic mapping 
        map(type, typeEntity);

        //--- Link mapping ( link : type )
        if (hasLinkToUseraccess(type)) {
            UseraccessEntity useraccess1 = new UseraccessEntity();
            useraccess1.setUserid(UUID.fromString(type.getTypeUserid()));
            typeEntity.setUseraccess(useraccess1);
        } else {
            typeEntity.setUseraccess(null);
        }

    }

    /**
     * Verify that Useraccess id is valid.
     *
     * @param Useraccess Useraccess
     * @return boolean
     */
    private boolean hasLinkToUseraccess(Type type) {
        return type.getTypeUserid() != null;
    }

    /**
     * {@inheritDoc}
     * @return ModelMapper
     */
    @Override
    protected ModelMapper getModelMapper() {
        return modelMapper;
    }

    protected void setModelMapper(ModelMapper modelMapper) {
        this.modelMapper = modelMapper;
    }

}
