/*
 * Created on 6 Dec 2015 ( Time 04:08:59 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.jpa.mapping;

import java.util.UUID;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import tristi.general.bean.Purchaseorderdtl;
import tristi.general.bean.jpa.PurchaseorderdtlEntity;
import tristi.general.bean.jpa.PurchaseorderEntity;
import tristi.general.bean.jpa.DetailexpiredEntity;
import tristi.general.bean.jpa.ProductuomEntity;
import tristi.general.bean.jpa.UseraccessEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class PurchaseorderdtlServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public PurchaseorderdtlServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'PurchaseorderdtlEntity' to 'Purchaseorderdtl'
	 * @param purchaseorderdtlEntity
         * @return Purchaseorderdtl
	 */
	public Purchaseorderdtl mapPurchaseorderdtlEntityToPurchaseorderdtl(PurchaseorderdtlEntity purchaseorderdtlEntity) {
		if(purchaseorderdtlEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Purchaseorderdtl purchaseorderdtl = map(purchaseorderdtlEntity, Purchaseorderdtl.class);

		//--- Link mapping ( link to Purchaseorder )
		if(purchaseorderdtlEntity.getPurchaseorder() != null) {
			purchaseorderdtl.setPodtlPoid(purchaseorderdtlEntity.getPurchaseorder().getPurchaseorderid().toString());
		}
		//--- Link mapping ( link to Detailexpired )
		if(purchaseorderdtlEntity.getDetailexpired() != null) {
			purchaseorderdtl.setPodtlDetailexpiredid(purchaseorderdtlEntity.getDetailexpired().getDetailexpiredid().toString());
		}
		//--- Link mapping ( link to Productuom )
		if(purchaseorderdtlEntity.getProductuom() != null) {
			purchaseorderdtl.setPodtlProductuomid(purchaseorderdtlEntity.getProductuom().getProductuomid().toString());
		}
		//--- Link mapping ( link to Useraccess )
		if(purchaseorderdtlEntity.getUseraccess() != null) {
			purchaseorderdtl.setPodtlUserid(purchaseorderdtlEntity.getUseraccess().getUserid().toString());
		}
		return purchaseorderdtl;
	}
	
	/**
	 * Mapping from 'Purchaseorderdtl' to 'PurchaseorderdtlEntity'
	 * @param purchaseorderdtl
	 * @param purchaseorderdtlEntity
	 */
	public void mapPurchaseorderdtlToPurchaseorderdtlEntity(Purchaseorderdtl purchaseorderdtl, PurchaseorderdtlEntity purchaseorderdtlEntity) {
		if(purchaseorderdtl == null) {
			return;
		}

		//--- Generic mapping 
		map(purchaseorderdtl, purchaseorderdtlEntity);

		//--- Link mapping ( link : purchaseorderdtl )
		if( hasLinkToPurchaseorder(purchaseorderdtl) ) {
			PurchaseorderEntity purchaseorder1 = new PurchaseorderEntity();
			purchaseorder1.setPurchaseorderid( UUID.fromString(purchaseorderdtl.getPodtlPoid()));
			purchaseorderdtlEntity.setPurchaseorder( purchaseorder1 );
		} else {
			purchaseorderdtlEntity.setPurchaseorder( null );
		}

		//--- Link mapping ( link : purchaseorderdtl )
		if( hasLinkToDetailexpired(purchaseorderdtl) ) {
			DetailexpiredEntity detailexpired2 = new DetailexpiredEntity();
			detailexpired2.setDetailexpiredid( UUID.fromString(purchaseorderdtl.getPodtlDetailexpiredid()));
			purchaseorderdtlEntity.setDetailexpired( detailexpired2 );
		} else {
			purchaseorderdtlEntity.setDetailexpired( null );
		}

		//--- Link mapping ( link : purchaseorderdtl )
		if( hasLinkToProductuom(purchaseorderdtl) ) {
			ProductuomEntity productuom3 = new ProductuomEntity();
			productuom3.setProductuomid( UUID.fromString(purchaseorderdtl.getPodtlProductuomid()));
			purchaseorderdtlEntity.setProductuom( productuom3 );
		} else {
			purchaseorderdtlEntity.setProductuom( null );
		}

		//--- Link mapping ( link : purchaseorderdtl )
		if( hasLinkToUseraccess(purchaseorderdtl) ) {
			UseraccessEntity useraccess4 = new UseraccessEntity();
			useraccess4.setUserid( UUID.fromString(purchaseorderdtl.getPodtlUserid()));
			purchaseorderdtlEntity.setUseraccess( useraccess4 );
		} else {
			purchaseorderdtlEntity.setUseraccess( null );
		}

	}
	
	/**
	 * Verify that Purchaseorder id is valid.
	 * @param Purchaseorder Purchaseorder
	 * @return boolean
	 */
	private boolean hasLinkToPurchaseorder(Purchaseorderdtl purchaseorderdtl) {
		return purchaseorderdtl.getPodtlPoid() != null;
	}

	/**
	 * Verify that Detailexpired id is valid.
	 * @param Detailexpired Detailexpired
	 * @return boolean
	 */
	private boolean hasLinkToDetailexpired(Purchaseorderdtl purchaseorderdtl) {
		return purchaseorderdtl.getPodtlDetailexpiredid() != null;
	}

	/**
	 * Verify that Productuom id is valid.
	 * @param Productuom Productuom
	 * @return boolean
	 */
	private boolean hasLinkToProductuom(Purchaseorderdtl purchaseorderdtl) {
		return purchaseorderdtl.getPodtlProductuomid() != null;
	}

	/**
	 * Verify that Useraccess id is valid.
	 * @param Useraccess Useraccess
	 * @return boolean
	 */
	private boolean hasLinkToUseraccess(Purchaseorderdtl purchaseorderdtl) {
		return purchaseorderdtl.getPodtlUserid() != null;
	}

	/**
	 * {@inheritDoc}
         * @return ModelMapper
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}