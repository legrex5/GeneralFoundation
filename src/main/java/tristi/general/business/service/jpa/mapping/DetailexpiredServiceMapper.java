/*
 * Created on 6 Dec 2015 ( Time 04:08:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.jpa.mapping;

import java.util.UUID;
import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import tristi.general.bean.Detailexpired;
import tristi.general.bean.jpa.DetailexpiredEntity;
import tristi.general.bean.jpa.ProductstockEntity;
import tristi.general.bean.jpa.LocationdtlEntity;
import tristi.general.bean.jpa.UseraccessEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class DetailexpiredServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public DetailexpiredServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'DetailexpiredEntity' to 'Detailexpired'
	 * @param detailexpiredEntity
         * @return Detailexpired
	 */
	public Detailexpired mapDetailexpiredEntityToDetailexpired(DetailexpiredEntity detailexpiredEntity) {
		if(detailexpiredEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Detailexpired detailexpired = map(detailexpiredEntity, Detailexpired.class);

		//--- Link mapping ( link to Productstock )
		if(detailexpiredEntity.getProductstock() != null) {
			detailexpired.setDetailexpiredProductstockid(detailexpiredEntity.getProductstock().getProductstockid().toString());
		}
		//--- Link mapping ( link to Locationdtl )
		if(detailexpiredEntity.getLocationdtl() != null) {
			detailexpired.setDetailexpiredLocationdtlid(detailexpiredEntity.getLocationdtl().getLocationdtlid().toString());
		}
		//--- Link mapping ( link to Useraccess )
		if(detailexpiredEntity.getUseraccess() != null) {
			detailexpired.setDetailexpiredUserid(detailexpiredEntity.getUseraccess().getUserid().toString());
		}
		return detailexpired;
	}
	
	/**
	 * Mapping from 'Detailexpired' to 'DetailexpiredEntity'
	 * @param detailexpired
	 * @param detailexpiredEntity
	 */
	public void mapDetailexpiredToDetailexpiredEntity(Detailexpired detailexpired, DetailexpiredEntity detailexpiredEntity) {
		if(detailexpired == null) {
			return;
		}

		//--- Generic mapping 
		map(detailexpired, detailexpiredEntity);

		//--- Link mapping ( link : detailexpired )
		if( hasLinkToProductstock(detailexpired) ) {
			ProductstockEntity productstock1 = new ProductstockEntity();
			productstock1.setProductstockid( UUID.fromString(detailexpired.getDetailexpiredProductstockid()));
			detailexpiredEntity.setProductstock( productstock1 );
		} else {
			detailexpiredEntity.setProductstock( null );
		}

		//--- Link mapping ( link : detailexpired )
		if( hasLinkToLocationdtl(detailexpired) ) {
			LocationdtlEntity locationdtl2 = new LocationdtlEntity();
			locationdtl2.setLocationdtlid( UUID.fromString(detailexpired.getDetailexpiredLocationdtlid()));
			detailexpiredEntity.setLocationdtl( locationdtl2 );
		} else {
			detailexpiredEntity.setLocationdtl( null );
		}

		//--- Link mapping ( link : detailexpired )
		if( hasLinkToUseraccess(detailexpired) ) {
			UseraccessEntity useraccess3 = new UseraccessEntity();
			useraccess3.setUserid( UUID.fromString(detailexpired.getDetailexpiredUserid()));
			detailexpiredEntity.setUseraccess( useraccess3 );
		} else {
			detailexpiredEntity.setUseraccess( null );
		}

	}
	
	/**
	 * Verify that Productstock id is valid.
	 * @param Productstock Productstock
	 * @return boolean
	 */
	private boolean hasLinkToProductstock(Detailexpired detailexpired) {
		return detailexpired.getDetailexpiredProductstockid() != null;
	}

	/**
	 * Verify that Locationdtl id is valid.
	 * @param Locationdtl Locationdtl
	 * @return boolean
	 */
	private boolean hasLinkToLocationdtl(Detailexpired detailexpired) {
		return detailexpired.getDetailexpiredLocationdtlid() != null;
	}

	/**
	 * Verify that Useraccess id is valid.
	 * @param Useraccess Useraccess
	 * @return boolean
	 */
	private boolean hasLinkToUseraccess(Detailexpired detailexpired) {
		return detailexpired.getDetailexpiredUserid() != null;
	}

	/**
	 * {@inheritDoc}
         * @return ModelMapper
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}