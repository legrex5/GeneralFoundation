/*
 * Created on 10 Dec 2015 ( Time 04:32:00 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.jdbc.impl.spring;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import java.util.UUID;

import tristi.general.bean.Salesordercorrection;
import tristi.general.business.service.SalesordercorrectionService;
import tristi.general.business.service.jdbc.impl.spring.commons.GenericDAO;

import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;

/**
 * Salesordercorrection DAO implementation 
 * 
 *
 */
@Repository
public class SalesordercorrectionDAOImplSpring extends GenericDAO<Salesordercorrection> implements SalesordercorrectionService {

	private final static String SQL_SELECT_ALL_PAGING = 
		"select salesordercorrectionid, salesordercorrection_sodtlid, salesordercorrection_userid, salesordercorrectionqty, salesordercorrectionprice, salesordercorrectionbaseprice, salesordercorrectiondiscount, salesordercorrectionmoddate from salesordercorrection limit ? offset ?";

        private final static String SQL_SELECT_ALL = 
		"select salesordercorrectionid, salesordercorrection_sodtlid, salesordercorrection_userid, salesordercorrectionqty, salesordercorrectionprice, salesordercorrectionbaseprice, salesordercorrectiondiscount, salesordercorrectionmoddate from salesordercorrection";

        private final static String SQL_SELECT_PAGING = 
		"select salesordercorrectionid, salesordercorrection_sodtlid, salesordercorrection_userid, salesordercorrectionqty, salesordercorrectionprice, salesordercorrectionbaseprice, salesordercorrectiondiscount, salesordercorrectionmoddate from salesordercorrection where salesordercorrectionid = ? limit ? offset ?";

        private final static String SQL_SELECT = 
		"select salesordercorrectionid, salesordercorrection_sodtlid, salesordercorrection_userid, salesordercorrectionqty, salesordercorrectionprice, salesordercorrectionbaseprice, salesordercorrectiondiscount, salesordercorrectionmoddate from salesordercorrection where salesordercorrectionid = ?";


	private final static String SQL_INSERT = 
		"insert into salesordercorrection ( salesordercorrection_sodtlid, salesordercorrection_userid, salesordercorrectionqty, salesordercorrectionprice, salesordercorrectionbaseprice, salesordercorrectiondiscount, salesordercorrectionmoddate ) values ( ?, ?, ?, ?, ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update salesordercorrection set salesordercorrection_sodtlid = ?, salesordercorrection_userid = ?, salesordercorrectionqty = ?, salesordercorrectionprice = ?, salesordercorrectionbaseprice = ?, salesordercorrectiondiscount = ?, salesordercorrectionmoddate = ? where salesordercorrectionid = ?";

	private final static String SQL_DELETE = 
		"delete from salesordercorrection where salesordercorrectionid = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from salesordercorrection";

	private final static String SQL_COUNT = 
		"select count(*) from salesordercorrection where salesordercorrectionid = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public SalesordercorrectionDAOImplSpring() {
		super();
	}

	@Override
	public boolean exists( String salesordercorrectionid ) {
		Object[] primaryKey = new Object[] { salesordercorrectionid };
		return super.doExists(primaryKey);
	}

	@Override
	public long count() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	// Super class abstract methods implementation
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelectAll() {
		return SQL_SELECT_ALL ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}
	//----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForInsert(Salesordercorrection salesordercorrection)  {
		return new Object[] {
			//--- Returns PRIMARY KEY and DATA ( for SQL "SET x=?, y=?, ..." )
//			salesordercorrection.getSalesordercorrectionid() , // "salesordercorrectionid" : java.lang.String
			salesordercorrection.getSalesordercorrectionSodtlid()==null?salesordercorrection.getSalesordercorrectionSodtlid():UUID.fromString(salesordercorrection.getSalesordercorrectionSodtlid()) , // "salesordercorrection_sodtlid" : java.lang.String
			salesordercorrection.getSalesordercorrectionUserid()==null?salesordercorrection.getSalesordercorrectionUserid():UUID.fromString(salesordercorrection.getSalesordercorrectionUserid()) , // "salesordercorrection_userid" : java.lang.String
			salesordercorrection.getSalesordercorrectionqty() , // "salesordercorrectionqty" : java.lang.Integer
			salesordercorrection.getSalesordercorrectionprice() , // "salesordercorrectionprice" : java.lang.Double
			salesordercorrection.getSalesordercorrectionbaseprice() , // "salesordercorrectionbaseprice" : java.lang.Double
			salesordercorrection.getSalesordercorrectiondiscount() , // "salesordercorrectiondiscount" : java.lang.Double
			salesordercorrection.getSalesordercorrectionmoddate()  // "salesordercorrectionmoddate" : java.util.Date
		};
	}
    //----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForUpdate(Salesordercorrection salesordercorrection) {
		return new Object[] {		
			//--- Returns DATA first ( for SQL "SET x=?, y=?, ..." )
			salesordercorrection.getSalesordercorrectionSodtlid()==null?salesordercorrection.getSalesordercorrectionSodtlid():UUID.fromString(salesordercorrection.getSalesordercorrectionSodtlid()) , // "salesordercorrection_sodtlid" : java.lang.String
			salesordercorrection.getSalesordercorrectionUserid()==null?salesordercorrection.getSalesordercorrectionUserid():UUID.fromString(salesordercorrection.getSalesordercorrectionUserid()) , // "salesordercorrection_userid" : java.lang.String
			salesordercorrection.getSalesordercorrectionqty(), // "salesordercorrectionqty" : java.lang.Integer
			salesordercorrection.getSalesordercorrectionprice(), // "salesordercorrectionprice" : java.lang.Double
			salesordercorrection.getSalesordercorrectionbaseprice(), // "salesordercorrectionbaseprice" : java.lang.Double
			salesordercorrection.getSalesordercorrectiondiscount(), // "salesordercorrectiondiscount" : java.lang.Double
			salesordercorrection.getSalesordercorrectionmoddate(), // "salesordercorrectionmoddate" : java.util.Date
			//--- Returns PRIMARY KEY at the end ( for SQL "WHERE key=?, ..." )
			UUID.fromString(salesordercorrection.getSalesordercorrectionid())  // "salesordercorrectionid" : java.lang.String
		};
	}
	//----------------------------------------------------------------------
	@Override
	protected Object[] getValuesForPrimaryKey(Salesordercorrection salesordercorrection)  {
		return new Object[] {
			//--- Returns PRIMARY KEY values ( for SQL "WHERE key=?, ..." )
			salesordercorrection.getSalesordercorrectionid()  // "salesordercorrectionid" : java.lang.String
		};
	}
	//----------------------------------------------------------------------
	@Override
	protected RowMapper<Salesordercorrection> getRowMapper(Salesordercorrection o)  {
		//--- RowMapper to populate the given bean instance
		return new SalesordercorrectionRowMapper(o) ;
	}
	//----------------------------------------------------------------------
	@Override
	protected RowMapper<Salesordercorrection> getRowMapper()  {
		//--- RowMapper to populate a new bean instance
		return new SalesordercorrectionRowMapper() ;
	}

    //----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param salesordercorrection
	 * @throws SQLException
	 */
	private Salesordercorrection populateBean(ResultSet rs, Salesordercorrection salesordercorrection) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		salesordercorrection.setSalesordercorrectionid(rs.getString("salesordercorrectionid")); // java.lang.String
		salesordercorrection.setSalesordercorrectionSodtlid(rs.getString("salesordercorrection_sodtlid")); // java.lang.String
		salesordercorrection.setSalesordercorrectionUserid(rs.getString("salesordercorrection_userid")); // java.lang.String
		salesordercorrection.setSalesordercorrectionqty(rs.getInt("salesordercorrectionqty")); // java.lang.Integer
		if ( rs.wasNull() ) { salesordercorrection.setSalesordercorrectionqty(null); }; // not primitive number => keep null value if any
		salesordercorrection.setSalesordercorrectionprice(rs.getDouble("salesordercorrectionprice")); // java.lang.Double
		if ( rs.wasNull() ) { salesordercorrection.setSalesordercorrectionprice(null); }; // not primitive number => keep null value if any
		salesordercorrection.setSalesordercorrectionbaseprice(rs.getDouble("salesordercorrectionbaseprice")); // java.lang.Double
		if ( rs.wasNull() ) { salesordercorrection.setSalesordercorrectionbaseprice(null); }; // not primitive number => keep null value if any
		salesordercorrection.setSalesordercorrectiondiscount(rs.getDouble("salesordercorrectiondiscount")); // java.lang.Double
		if ( rs.wasNull() ) { salesordercorrection.setSalesordercorrectiondiscount(null); }; // not primitive number => keep null value if any
		salesordercorrection.setSalesordercorrectionmoddate(rs.getDate("salesordercorrectionmoddate")); // java.util.Date
                return salesordercorrection;
	}
        
    //----------------------------------------------------------------------
	/**
	 * Populates the given bean with the data retrieved from the given ResultSet
	 * @param rs
	 * @param salesordercorrection
	 * @throws SQLException
	 */
	private Salesordercorrection populateBean(ResultSet rs) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
            Salesordercorrection salesordercorrection = new Salesordercorrection();
		salesordercorrection.setSalesordercorrectionid(rs.getString("salesordercorrectionid")); // java.lang.String
		salesordercorrection.setSalesordercorrectionSodtlid(rs.getString("salesordercorrection_sodtlid")); // java.lang.String
		salesordercorrection.setSalesordercorrectionUserid(rs.getString("salesordercorrection_userid")); // java.lang.String
		salesordercorrection.setSalesordercorrectionqty(rs.getInt("salesordercorrectionqty")); // java.lang.Integer
		if ( rs.wasNull() ) { salesordercorrection.setSalesordercorrectionqty(null); }; // not primitive number => keep null value if any
		salesordercorrection.setSalesordercorrectionprice(rs.getDouble("salesordercorrectionprice")); // java.lang.Double
		if ( rs.wasNull() ) { salesordercorrection.setSalesordercorrectionprice(null); }; // not primitive number => keep null value if any
		salesordercorrection.setSalesordercorrectionbaseprice(rs.getDouble("salesordercorrectionbaseprice")); // java.lang.Double
		if ( rs.wasNull() ) { salesordercorrection.setSalesordercorrectionbaseprice(null); }; // not primitive number => keep null value if any
		salesordercorrection.setSalesordercorrectiondiscount(rs.getDouble("salesordercorrectiondiscount")); // java.lang.Double
		if ( rs.wasNull() ) { salesordercorrection.setSalesordercorrectiondiscount(null); }; // not primitive number => keep null value if any
		salesordercorrection.setSalesordercorrectionmoddate(rs.getDate("salesordercorrectionmoddate")); // java.util.Date
                return salesordercorrection;
	}

    //----------------------------------------------------------------------
	/**
	 * Specific inner class for 'RowMapper' implementation
	 */
	private class SalesordercorrectionRowMapper implements RowMapper<Salesordercorrection> {

		/**
		 * The bean instance that will be populated from the ResultSet
		 */
		private Salesordercorrection bean ;
		
		/**
		 * Constructor
		 * @param bean the bean to be populated 
		 */
		SalesordercorrectionRowMapper(Salesordercorrection bean) {
			this.bean = bean ;
		}
		
		public SalesordercorrectionRowMapper() {
			// TODO Auto-generated constructor stub
		}
		
		@Override
		public Salesordercorrection mapRow(ResultSet rs, int rowNum) throws SQLException {
			if (this.bean != null) {
                return populateBean(rs, bean);
            } else {
                return populateBean(rs);
            }
		}
	}

	@Override
	public Salesordercorrection findById(String salesordercorrectionid) {
		Object[] primaryKey = new Object[] { UUID.fromString(salesordercorrectionid) };
		return super.doSelect(primaryKey);
	}

	@Override
	public List<Salesordercorrection> findAll() {
		return super.doSelectAll();
	}

	@Override
	public Salesordercorrection save(Salesordercorrection entity) {
		super.doUpdate(entity);
		return entity;
	}

	@Override
	public Salesordercorrection update(Salesordercorrection entity) {
		super.doUpdate(entity);
		return entity;
	}

	@Override
	public Salesordercorrection create(Salesordercorrection entity) {
		super.doInsert(entity);
		return entity;
	}

	@Override
	public void delete(String salesordercorrectionid) {
		Object[] primaryKey = new Object[] { salesordercorrectionid };
		super.doDelete(primaryKey);	
	}
}
