/*
 * Created on 6 Dec 2015 ( Time 04:13:34 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import tristi.general.bean.Location;
import tristi.general.business.service.LocationService;
import tristi.general.web.listitem.LocationListItem;

/**
 * Spring MVC controller for 'Location' management.
 */
@Controller
public class LocationRestController {

	@Resource
	private LocationService locationService;
	
	@RequestMapping( value="/items/location",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<LocationListItem> findAllAsListItems() {
		List<Location> list = locationService.findAll();
		List<LocationListItem> items = new LinkedList<LocationListItem>();
		for ( Location location : list ) {
			items.add(new LocationListItem( location ) );
		}
		return items;
	}
	
	@RequestMapping( value="/location",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<Location> findAll() {
		return locationService.findAll();
	}

	@RequestMapping( value="/location/{locationid}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Location findOne(@PathVariable("locationid") String locationid) {
		return locationService.findById(locationid);
	}
	
	@RequestMapping( value="/location",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Location create(@RequestBody Location location) {
		return locationService.create(location);
	}

	@RequestMapping( value="/location/{locationid}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Location update(@PathVariable("locationid") String locationid, @RequestBody Location location) {
		return locationService.update(location);
	}

	@RequestMapping( value="/location/{locationid}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("locationid") String locationid) {
		locationService.delete(locationid);
	}
	
}
