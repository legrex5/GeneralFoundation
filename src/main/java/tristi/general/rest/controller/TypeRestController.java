/*
 * Created on 6 Dec 2015 ( Time 04:13:35 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import tristi.general.bean.Type;
import tristi.general.business.service.TypeService;
import tristi.general.web.listitem.TypeListItem;

/**
 * Spring MVC controller for 'Type' management.
 */
@Controller
public class TypeRestController {

	@Resource
	private TypeService typeService;
	
	@RequestMapping( value="/items/type",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<TypeListItem> findAllAsListItems() {
		List<Type> list = typeService.findAll();
		List<TypeListItem> items = new LinkedList<TypeListItem>();
		for ( Type type : list ) {
			items.add(new TypeListItem( type ) );
		}
		return items;
	}
	
	@RequestMapping( value="/type",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<Type> findAll() {
		return typeService.findAll();
	}

	@RequestMapping( value="/type/{typeid}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Type findOne(@PathVariable("typeid") String typeid) {
		return typeService.findById(typeid);
	}
	
	@RequestMapping( value="/type",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Type create(@RequestBody Type type) {
		return typeService.create(type);
	}

	@RequestMapping( value="/type/{typeid}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Type update(@PathVariable("typeid") String typeid, @RequestBody Type type) {
		return typeService.update(type);
	}

	@RequestMapping( value="/type/{typeid}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("typeid") String typeid) {
		typeService.delete(typeid);
	}
	
}
