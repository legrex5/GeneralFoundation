/*
 * Created on 6 Dec 2015 ( Time 04:13:34 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.rest.controller;

import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

import tristi.general.bean.Paymentform;
import tristi.general.business.service.PaymentformService;
import tristi.general.web.listitem.PaymentformListItem;

/**
 * Spring MVC controller for 'Paymentform' management.
 */
@Controller
public class PaymentformRestController {

	@Resource
	private PaymentformService paymentformService;
	
	@RequestMapping( value="/items/paymentform",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<PaymentformListItem> findAllAsListItems() {
		List<Paymentform> list = paymentformService.findAll();
		List<PaymentformListItem> items = new LinkedList<PaymentformListItem>();
		for ( Paymentform paymentform : list ) {
			items.add(new PaymentformListItem( paymentform ) );
		}
		return items;
	}
	
	@RequestMapping( value="/paymentform",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<Paymentform> findAll() {
		return paymentformService.findAll();
	}

	@RequestMapping( value="/paymentform/{paymentformid}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Paymentform findOne(@PathVariable("paymentformid") String paymentformid) {
		return paymentformService.findById(paymentformid);
	}
	
	@RequestMapping( value="/paymentform",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Paymentform create(@RequestBody Paymentform paymentform) {
		return paymentformService.create(paymentform);
	}

	@RequestMapping( value="/paymentform/{paymentformid}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Paymentform update(@PathVariable("paymentformid") String paymentformid, @RequestBody Paymentform paymentform) {
		return paymentformService.update(paymentform);
	}

	@RequestMapping( value="/paymentform/{paymentformid}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("paymentformid") String paymentformid) {
		paymentformService.delete(paymentformid);
	}
	
}
