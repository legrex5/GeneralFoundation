/*
 * Created on 6 Dec 2015 ( Time 04:08:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import tristi.general.bean.Productstock;
import tristi.general.bean.jpa.ProductstockEntity;

import java.util.Date;
import java.util.List;

import tristi.general.business.service.jpa.impl.ProductstockServiceImpl;
import tristi.general.business.service.jpa.mapping.ProductstockServiceMapper;
import tristi.general.data.repository.jpa.ProductstockJpaRepository;
import tristi.general.test.ProductstockFactoryForTest;
import tristi.general.test.ProductstockEntityFactoryForTest;
import tristi.general.test.MockValues;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ProductstockService
 */
@RunWith(MockitoJUnitRunner.class)
public class ProductstockServiceImplTest {

	@InjectMocks
	private ProductstockServiceImpl productstockService;
	@Mock
	private ProductstockJpaRepository productstockJpaRepository;
	@Mock
	private ProductstockServiceMapper productstockServiceMapper;
	
	private ProductstockFactoryForTest productstockFactoryForTest = new ProductstockFactoryForTest();

	private ProductstockEntityFactoryForTest productstockEntityFactoryForTest = new ProductstockEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String productstockid = mockValues.nextString(255);
		
		ProductstockEntity productstockEntity = productstockJpaRepository.findOne(productstockid);
		
		Productstock productstock = productstockFactoryForTest.newProductstock();
		when(productstockServiceMapper.mapProductstockEntityToProductstock(productstockEntity)).thenReturn(productstock);

		// When
		Productstock productstockFound = productstockService.findById(productstockid);

		// Then
		assertEquals(productstock.getProductstockid(),productstockFound.getProductstockid());
	}

	@Test
	public void findAll() {
		// Given
		List<ProductstockEntity> productstockEntitys = new ArrayList<ProductstockEntity>();
		ProductstockEntity productstockEntity1 = productstockEntityFactoryForTest.newProductstockEntity();
		productstockEntitys.add(productstockEntity1);
		ProductstockEntity productstockEntity2 = productstockEntityFactoryForTest.newProductstockEntity();
		productstockEntitys.add(productstockEntity2);
		when(productstockJpaRepository.findAll()).thenReturn(productstockEntitys);
		
		Productstock productstock1 = productstockFactoryForTest.newProductstock();
		when(productstockServiceMapper.mapProductstockEntityToProductstock(productstockEntity1)).thenReturn(productstock1);
		Productstock productstock2 = productstockFactoryForTest.newProductstock();
		when(productstockServiceMapper.mapProductstockEntityToProductstock(productstockEntity2)).thenReturn(productstock2);

		// When
		List<Productstock> productstocksFounds = productstockService.findAll();

		// Then
		assertTrue(productstock1 == productstocksFounds.get(0));
		assertTrue(productstock2 == productstocksFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Productstock productstock = productstockFactoryForTest.newProductstock();

		ProductstockEntity productstockEntity = productstockEntityFactoryForTest.newProductstockEntity();
		when(productstockJpaRepository.findOne(productstock.getProductstockid())).thenReturn(null);
		
		productstockEntity = new ProductstockEntity();
		productstockServiceMapper.mapProductstockToProductstockEntity(productstock, productstockEntity);
		ProductstockEntity productstockEntitySaved = productstockJpaRepository.save(productstockEntity);
		
		Productstock productstockSaved = productstockFactoryForTest.newProductstock();
		when(productstockServiceMapper.mapProductstockEntityToProductstock(productstockEntitySaved)).thenReturn(productstockSaved);

		// When
		Productstock productstockResult = productstockService.create(productstock);

		// Then
		assertTrue(productstockResult == productstockSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Productstock productstock = productstockFactoryForTest.newProductstock();

		ProductstockEntity productstockEntity = productstockEntityFactoryForTest.newProductstockEntity();
		when(productstockJpaRepository.findOne(productstock.getProductstockid())).thenReturn(productstockEntity);

		// When
		Exception exception = null;
		try {
			productstockService.create(productstock);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Productstock productstock = productstockFactoryForTest.newProductstock();

		ProductstockEntity productstockEntity = productstockEntityFactoryForTest.newProductstockEntity();
		when(productstockJpaRepository.findOne(productstock.getProductstockid())).thenReturn(productstockEntity);
		
		ProductstockEntity productstockEntitySaved = productstockEntityFactoryForTest.newProductstockEntity();
		when(productstockJpaRepository.save(productstockEntity)).thenReturn(productstockEntitySaved);
		
		Productstock productstockSaved = productstockFactoryForTest.newProductstock();
		when(productstockServiceMapper.mapProductstockEntityToProductstock(productstockEntitySaved)).thenReturn(productstockSaved);

		// When
		Productstock productstockResult = productstockService.update(productstock);

		// Then
		verify(productstockServiceMapper).mapProductstockToProductstockEntity(productstock, productstockEntity);
		assertTrue(productstockResult == productstockSaved);
	}

	@Test
	public void delete() {
		// Given
		String productstockid = mockValues.nextString(255);

		// When
		productstockService.delete(productstockid);

		// Then
		verify(productstockJpaRepository).delete(productstockid);
		
	}

}
