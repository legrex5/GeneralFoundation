/*
 * Created on 6 Dec 2015 ( Time 04:08:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import tristi.general.bean.Product;
import tristi.general.bean.jpa.ProductEntity;

import java.util.Date;
import java.util.List;

import tristi.general.business.service.jpa.impl.ProductServiceImpl;
import tristi.general.business.service.jpa.mapping.ProductServiceMapper;
import tristi.general.data.repository.jpa.ProductJpaRepository;
import tristi.general.test.ProductFactoryForTest;
import tristi.general.test.ProductEntityFactoryForTest;
import tristi.general.test.MockValues;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ProductService
 */
@RunWith(MockitoJUnitRunner.class)
public class ProductServiceImplTest {

	@InjectMocks
	private ProductServiceImpl productService;
	@Mock
	private ProductJpaRepository productJpaRepository;
	@Mock
	private ProductServiceMapper productServiceMapper;
	
	private ProductFactoryForTest productFactoryForTest = new ProductFactoryForTest();

	private ProductEntityFactoryForTest productEntityFactoryForTest = new ProductEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String productid = mockValues.nextString(255);
		
		ProductEntity productEntity = productJpaRepository.findOne(productid);
		
		Product product = productFactoryForTest.newProduct();
		when(productServiceMapper.mapProductEntityToProduct(productEntity)).thenReturn(product);

		// When
		Product productFound = productService.findById(productid);

		// Then
		assertEquals(product.getProductid(),productFound.getProductid());
	}

	@Test
	public void findAll() {
		// Given
		List<ProductEntity> productEntitys = new ArrayList<ProductEntity>();
		ProductEntity productEntity1 = productEntityFactoryForTest.newProductEntity();
		productEntitys.add(productEntity1);
		ProductEntity productEntity2 = productEntityFactoryForTest.newProductEntity();
		productEntitys.add(productEntity2);
		when(productJpaRepository.findAll()).thenReturn(productEntitys);
		
		Product product1 = productFactoryForTest.newProduct();
		when(productServiceMapper.mapProductEntityToProduct(productEntity1)).thenReturn(product1);
		Product product2 = productFactoryForTest.newProduct();
		when(productServiceMapper.mapProductEntityToProduct(productEntity2)).thenReturn(product2);

		// When
		List<Product> productsFounds = productService.findAll();

		// Then
		assertTrue(product1 == productsFounds.get(0));
		assertTrue(product2 == productsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Product product = productFactoryForTest.newProduct();

		ProductEntity productEntity = productEntityFactoryForTest.newProductEntity();
		when(productJpaRepository.findOne(product.getProductid())).thenReturn(null);
		
		productEntity = new ProductEntity();
		productServiceMapper.mapProductToProductEntity(product, productEntity);
		ProductEntity productEntitySaved = productJpaRepository.save(productEntity);
		
		Product productSaved = productFactoryForTest.newProduct();
		when(productServiceMapper.mapProductEntityToProduct(productEntitySaved)).thenReturn(productSaved);

		// When
		Product productResult = productService.create(product);

		// Then
		assertTrue(productResult == productSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Product product = productFactoryForTest.newProduct();

		ProductEntity productEntity = productEntityFactoryForTest.newProductEntity();
		when(productJpaRepository.findOne(product.getProductid())).thenReturn(productEntity);

		// When
		Exception exception = null;
		try {
			productService.create(product);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Product product = productFactoryForTest.newProduct();

		ProductEntity productEntity = productEntityFactoryForTest.newProductEntity();
		when(productJpaRepository.findOne(product.getProductid())).thenReturn(productEntity);
		
		ProductEntity productEntitySaved = productEntityFactoryForTest.newProductEntity();
		when(productJpaRepository.save(productEntity)).thenReturn(productEntitySaved);
		
		Product productSaved = productFactoryForTest.newProduct();
		when(productServiceMapper.mapProductEntityToProduct(productEntitySaved)).thenReturn(productSaved);

		// When
		Product productResult = productService.update(product);

		// Then
		verify(productServiceMapper).mapProductToProductEntity(product, productEntity);
		assertTrue(productResult == productSaved);
	}

	@Test
	public void delete() {
		// Given
		String productid = mockValues.nextString(255);

		// When
		productService.delete(productid);

		// Then
		verify(productJpaRepository).delete(productid);
		
	}

}
