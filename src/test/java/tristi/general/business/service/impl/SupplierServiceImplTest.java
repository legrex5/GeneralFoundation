/*
 * Created on 6 Dec 2015 ( Time 04:08:59 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import tristi.general.bean.Supplier;
import tristi.general.bean.jpa.SupplierEntity;

import java.util.Date;
import java.util.List;

import tristi.general.business.service.jpa.impl.SupplierServiceImpl;
import tristi.general.business.service.jpa.mapping.SupplierServiceMapper;
import tristi.general.data.repository.jpa.SupplierJpaRepository;
import tristi.general.test.SupplierFactoryForTest;
import tristi.general.test.SupplierEntityFactoryForTest;
import tristi.general.test.MockValues;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of SupplierService
 */
@RunWith(MockitoJUnitRunner.class)
public class SupplierServiceImplTest {

	@InjectMocks
	private SupplierServiceImpl supplierService;
	@Mock
	private SupplierJpaRepository supplierJpaRepository;
	@Mock
	private SupplierServiceMapper supplierServiceMapper;
	
	private SupplierFactoryForTest supplierFactoryForTest = new SupplierFactoryForTest();

	private SupplierEntityFactoryForTest supplierEntityFactoryForTest = new SupplierEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String supplierid = mockValues.nextString(255);
		
		SupplierEntity supplierEntity = supplierJpaRepository.findOne(supplierid);
		
		Supplier supplier = supplierFactoryForTest.newSupplier();
		when(supplierServiceMapper.mapSupplierEntityToSupplier(supplierEntity)).thenReturn(supplier);

		// When
		Supplier supplierFound = supplierService.findById(supplierid);

		// Then
		assertEquals(supplier.getSupplierid(),supplierFound.getSupplierid());
	}

	@Test
	public void findAll() {
		// Given
		List<SupplierEntity> supplierEntitys = new ArrayList<SupplierEntity>();
		SupplierEntity supplierEntity1 = supplierEntityFactoryForTest.newSupplierEntity();
		supplierEntitys.add(supplierEntity1);
		SupplierEntity supplierEntity2 = supplierEntityFactoryForTest.newSupplierEntity();
		supplierEntitys.add(supplierEntity2);
		when(supplierJpaRepository.findAll()).thenReturn(supplierEntitys);
		
		Supplier supplier1 = supplierFactoryForTest.newSupplier();
		when(supplierServiceMapper.mapSupplierEntityToSupplier(supplierEntity1)).thenReturn(supplier1);
		Supplier supplier2 = supplierFactoryForTest.newSupplier();
		when(supplierServiceMapper.mapSupplierEntityToSupplier(supplierEntity2)).thenReturn(supplier2);

		// When
		List<Supplier> suppliersFounds = supplierService.findAll();

		// Then
		assertTrue(supplier1 == suppliersFounds.get(0));
		assertTrue(supplier2 == suppliersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Supplier supplier = supplierFactoryForTest.newSupplier();

		SupplierEntity supplierEntity = supplierEntityFactoryForTest.newSupplierEntity();
		when(supplierJpaRepository.findOne(supplier.getSupplierid())).thenReturn(null);
		
		supplierEntity = new SupplierEntity();
		supplierServiceMapper.mapSupplierToSupplierEntity(supplier, supplierEntity);
		SupplierEntity supplierEntitySaved = supplierJpaRepository.save(supplierEntity);
		
		Supplier supplierSaved = supplierFactoryForTest.newSupplier();
		when(supplierServiceMapper.mapSupplierEntityToSupplier(supplierEntitySaved)).thenReturn(supplierSaved);

		// When
		Supplier supplierResult = supplierService.create(supplier);

		// Then
		assertTrue(supplierResult == supplierSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Supplier supplier = supplierFactoryForTest.newSupplier();

		SupplierEntity supplierEntity = supplierEntityFactoryForTest.newSupplierEntity();
		when(supplierJpaRepository.findOne(supplier.getSupplierid())).thenReturn(supplierEntity);

		// When
		Exception exception = null;
		try {
			supplierService.create(supplier);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Supplier supplier = supplierFactoryForTest.newSupplier();

		SupplierEntity supplierEntity = supplierEntityFactoryForTest.newSupplierEntity();
		when(supplierJpaRepository.findOne(supplier.getSupplierid())).thenReturn(supplierEntity);
		
		SupplierEntity supplierEntitySaved = supplierEntityFactoryForTest.newSupplierEntity();
		when(supplierJpaRepository.save(supplierEntity)).thenReturn(supplierEntitySaved);
		
		Supplier supplierSaved = supplierFactoryForTest.newSupplier();
		when(supplierServiceMapper.mapSupplierEntityToSupplier(supplierEntitySaved)).thenReturn(supplierSaved);

		// When
		Supplier supplierResult = supplierService.update(supplier);

		// Then
		verify(supplierServiceMapper).mapSupplierToSupplierEntity(supplier, supplierEntity);
		assertTrue(supplierResult == supplierSaved);
	}

	@Test
	public void delete() {
		// Given
		String supplierid = mockValues.nextString(255);

		// When
		supplierService.delete(supplierid);

		// Then
		verify(supplierJpaRepository).delete(supplierid);
		
	}

}
