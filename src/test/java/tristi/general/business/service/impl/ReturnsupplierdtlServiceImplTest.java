/*
 * Created on 6 Dec 2015 ( Time 04:08:59 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import tristi.general.bean.Returnsupplierdtl;
import tristi.general.bean.jpa.ReturnsupplierdtlEntity;

import java.util.Date;

import tristi.general.business.service.jpa.impl.ReturnsupplierdtlServiceImpl;
import tristi.general.business.service.jpa.mapping.ReturnsupplierdtlServiceMapper;
import tristi.general.data.repository.jpa.ReturnsupplierdtlJpaRepository;
import tristi.general.test.ReturnsupplierdtlFactoryForTest;
import tristi.general.test.ReturnsupplierdtlEntityFactoryForTest;
import tristi.general.test.MockValues;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ReturnsupplierdtlService
 */
@RunWith(MockitoJUnitRunner.class)
public class ReturnsupplierdtlServiceImplTest {

	@InjectMocks
	private ReturnsupplierdtlServiceImpl returnsupplierdtlService;
	@Mock
	private ReturnsupplierdtlJpaRepository returnsupplierdtlJpaRepository;
	@Mock
	private ReturnsupplierdtlServiceMapper returnsupplierdtlServiceMapper;
	
	private ReturnsupplierdtlFactoryForTest returnsupplierdtlFactoryForTest = new ReturnsupplierdtlFactoryForTest();

	private ReturnsupplierdtlEntityFactoryForTest returnsupplierdtlEntityFactoryForTest = new ReturnsupplierdtlEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String returndtlid = mockValues.nextString(255);
		
		ReturnsupplierdtlEntity returnsupplierdtlEntity = returnsupplierdtlJpaRepository.findOne(returndtlid);
		
		Returnsupplierdtl returnsupplierdtl = returnsupplierdtlFactoryForTest.newReturnsupplierdtl();
		when(returnsupplierdtlServiceMapper.mapReturnsupplierdtlEntityToReturnsupplierdtl(returnsupplierdtlEntity)).thenReturn(returnsupplierdtl);

		// When
		Returnsupplierdtl returnsupplierdtlFound = returnsupplierdtlService.findById(returndtlid);

		// Then
		assertEquals(returnsupplierdtl.getReturndtlid(),returnsupplierdtlFound.getReturndtlid());
	}

	@Test
	public void findAll() {
		// Given
		List<ReturnsupplierdtlEntity> returnsupplierdtlEntitys = new ArrayList<ReturnsupplierdtlEntity>();
		ReturnsupplierdtlEntity returnsupplierdtlEntity1 = returnsupplierdtlEntityFactoryForTest.newReturnsupplierdtlEntity();
		returnsupplierdtlEntitys.add(returnsupplierdtlEntity1);
		ReturnsupplierdtlEntity returnsupplierdtlEntity2 = returnsupplierdtlEntityFactoryForTest.newReturnsupplierdtlEntity();
		returnsupplierdtlEntitys.add(returnsupplierdtlEntity2);
		when(returnsupplierdtlJpaRepository.findAll()).thenReturn(returnsupplierdtlEntitys);
		
		Returnsupplierdtl returnsupplierdtl1 = returnsupplierdtlFactoryForTest.newReturnsupplierdtl();
		when(returnsupplierdtlServiceMapper.mapReturnsupplierdtlEntityToReturnsupplierdtl(returnsupplierdtlEntity1)).thenReturn(returnsupplierdtl1);
		Returnsupplierdtl returnsupplierdtl2 = returnsupplierdtlFactoryForTest.newReturnsupplierdtl();
		when(returnsupplierdtlServiceMapper.mapReturnsupplierdtlEntityToReturnsupplierdtl(returnsupplierdtlEntity2)).thenReturn(returnsupplierdtl2);

		// When
		List<Returnsupplierdtl> returnsupplierdtlsFounds = returnsupplierdtlService.findAll();

		// Then
		assertTrue(returnsupplierdtl1 == returnsupplierdtlsFounds.get(0));
		assertTrue(returnsupplierdtl2 == returnsupplierdtlsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Returnsupplierdtl returnsupplierdtl = returnsupplierdtlFactoryForTest.newReturnsupplierdtl();

		ReturnsupplierdtlEntity returnsupplierdtlEntity = returnsupplierdtlEntityFactoryForTest.newReturnsupplierdtlEntity();
		when(returnsupplierdtlJpaRepository.findOne(returnsupplierdtl.getReturndtlid())).thenReturn(null);
		
		returnsupplierdtlEntity = new ReturnsupplierdtlEntity();
		returnsupplierdtlServiceMapper.mapReturnsupplierdtlToReturnsupplierdtlEntity(returnsupplierdtl, returnsupplierdtlEntity);
		ReturnsupplierdtlEntity returnsupplierdtlEntitySaved = returnsupplierdtlJpaRepository.save(returnsupplierdtlEntity);
		
		Returnsupplierdtl returnsupplierdtlSaved = returnsupplierdtlFactoryForTest.newReturnsupplierdtl();
		when(returnsupplierdtlServiceMapper.mapReturnsupplierdtlEntityToReturnsupplierdtl(returnsupplierdtlEntitySaved)).thenReturn(returnsupplierdtlSaved);

		// When
		Returnsupplierdtl returnsupplierdtlResult = returnsupplierdtlService.create(returnsupplierdtl);

		// Then
		assertTrue(returnsupplierdtlResult == returnsupplierdtlSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Returnsupplierdtl returnsupplierdtl = returnsupplierdtlFactoryForTest.newReturnsupplierdtl();

		ReturnsupplierdtlEntity returnsupplierdtlEntity = returnsupplierdtlEntityFactoryForTest.newReturnsupplierdtlEntity();
		when(returnsupplierdtlJpaRepository.findOne(returnsupplierdtl.getReturndtlid())).thenReturn(returnsupplierdtlEntity);

		// When
		Exception exception = null;
		try {
			returnsupplierdtlService.create(returnsupplierdtl);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Returnsupplierdtl returnsupplierdtl = returnsupplierdtlFactoryForTest.newReturnsupplierdtl();

		ReturnsupplierdtlEntity returnsupplierdtlEntity = returnsupplierdtlEntityFactoryForTest.newReturnsupplierdtlEntity();
		when(returnsupplierdtlJpaRepository.findOne(returnsupplierdtl.getReturndtlid())).thenReturn(returnsupplierdtlEntity);
		
		ReturnsupplierdtlEntity returnsupplierdtlEntitySaved = returnsupplierdtlEntityFactoryForTest.newReturnsupplierdtlEntity();
		when(returnsupplierdtlJpaRepository.save(returnsupplierdtlEntity)).thenReturn(returnsupplierdtlEntitySaved);
		
		Returnsupplierdtl returnsupplierdtlSaved = returnsupplierdtlFactoryForTest.newReturnsupplierdtl();
		when(returnsupplierdtlServiceMapper.mapReturnsupplierdtlEntityToReturnsupplierdtl(returnsupplierdtlEntitySaved)).thenReturn(returnsupplierdtlSaved);

		// When
		Returnsupplierdtl returnsupplierdtlResult = returnsupplierdtlService.update(returnsupplierdtl);

		// Then
		verify(returnsupplierdtlServiceMapper).mapReturnsupplierdtlToReturnsupplierdtlEntity(returnsupplierdtl, returnsupplierdtlEntity);
		assertTrue(returnsupplierdtlResult == returnsupplierdtlSaved);
	}

	@Test
	public void delete() {
		// Given
		String returndtlid = mockValues.nextString(255);

		// When
		returnsupplierdtlService.delete(returndtlid);

		// Then
		verify(returnsupplierdtlJpaRepository).delete(returndtlid);
		
	}

}
