/*
 * Created on 6 Dec 2015 ( Time 04:08:59 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import tristi.general.bean.Purchaseorderdtl;
import tristi.general.bean.jpa.PurchaseorderdtlEntity;

import java.util.Date;

import tristi.general.business.service.jpa.impl.PurchaseorderdtlServiceImpl;
import tristi.general.business.service.jpa.mapping.PurchaseorderdtlServiceMapper;
import tristi.general.data.repository.jpa.PurchaseorderdtlJpaRepository;
import tristi.general.test.PurchaseorderdtlFactoryForTest;
import tristi.general.test.PurchaseorderdtlEntityFactoryForTest;
import tristi.general.test.MockValues;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PurchaseorderdtlService
 */
@RunWith(MockitoJUnitRunner.class)
public class PurchaseorderdtlServiceImplTest {

	@InjectMocks
	private PurchaseorderdtlServiceImpl purchaseorderdtlService;
	@Mock
	private PurchaseorderdtlJpaRepository purchaseorderdtlJpaRepository;
	@Mock
	private PurchaseorderdtlServiceMapper purchaseorderdtlServiceMapper;
	
	private PurchaseorderdtlFactoryForTest purchaseorderdtlFactoryForTest = new PurchaseorderdtlFactoryForTest();

	private PurchaseorderdtlEntityFactoryForTest purchaseorderdtlEntityFactoryForTest = new PurchaseorderdtlEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String purchaseorderdtlid = mockValues.nextString(255);
		
		PurchaseorderdtlEntity purchaseorderdtlEntity = purchaseorderdtlJpaRepository.findOne(purchaseorderdtlid);
		
		Purchaseorderdtl purchaseorderdtl = purchaseorderdtlFactoryForTest.newPurchaseorderdtl();
		when(purchaseorderdtlServiceMapper.mapPurchaseorderdtlEntityToPurchaseorderdtl(purchaseorderdtlEntity)).thenReturn(purchaseorderdtl);

		// When
		Purchaseorderdtl purchaseorderdtlFound = purchaseorderdtlService.findById(purchaseorderdtlid);

		// Then
		assertEquals(purchaseorderdtl.getPurchaseorderdtlid(),purchaseorderdtlFound.getPurchaseorderdtlid());
	}

	@Test
	public void findAll() {
		// Given
		List<PurchaseorderdtlEntity> purchaseorderdtlEntitys = new ArrayList<PurchaseorderdtlEntity>();
		PurchaseorderdtlEntity purchaseorderdtlEntity1 = purchaseorderdtlEntityFactoryForTest.newPurchaseorderdtlEntity();
		purchaseorderdtlEntitys.add(purchaseorderdtlEntity1);
		PurchaseorderdtlEntity purchaseorderdtlEntity2 = purchaseorderdtlEntityFactoryForTest.newPurchaseorderdtlEntity();
		purchaseorderdtlEntitys.add(purchaseorderdtlEntity2);
		when(purchaseorderdtlJpaRepository.findAll()).thenReturn(purchaseorderdtlEntitys);
		
		Purchaseorderdtl purchaseorderdtl1 = purchaseorderdtlFactoryForTest.newPurchaseorderdtl();
		when(purchaseorderdtlServiceMapper.mapPurchaseorderdtlEntityToPurchaseorderdtl(purchaseorderdtlEntity1)).thenReturn(purchaseorderdtl1);
		Purchaseorderdtl purchaseorderdtl2 = purchaseorderdtlFactoryForTest.newPurchaseorderdtl();
		when(purchaseorderdtlServiceMapper.mapPurchaseorderdtlEntityToPurchaseorderdtl(purchaseorderdtlEntity2)).thenReturn(purchaseorderdtl2);

		// When
		List<Purchaseorderdtl> purchaseorderdtlsFounds = purchaseorderdtlService.findAll();

		// Then
		assertTrue(purchaseorderdtl1 == purchaseorderdtlsFounds.get(0));
		assertTrue(purchaseorderdtl2 == purchaseorderdtlsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Purchaseorderdtl purchaseorderdtl = purchaseorderdtlFactoryForTest.newPurchaseorderdtl();

		PurchaseorderdtlEntity purchaseorderdtlEntity = purchaseorderdtlEntityFactoryForTest.newPurchaseorderdtlEntity();
		when(purchaseorderdtlJpaRepository.findOne(purchaseorderdtl.getPurchaseorderdtlid())).thenReturn(null);
		
		purchaseorderdtlEntity = new PurchaseorderdtlEntity();
		purchaseorderdtlServiceMapper.mapPurchaseorderdtlToPurchaseorderdtlEntity(purchaseorderdtl, purchaseorderdtlEntity);
		PurchaseorderdtlEntity purchaseorderdtlEntitySaved = purchaseorderdtlJpaRepository.save(purchaseorderdtlEntity);
		
		Purchaseorderdtl purchaseorderdtlSaved = purchaseorderdtlFactoryForTest.newPurchaseorderdtl();
		when(purchaseorderdtlServiceMapper.mapPurchaseorderdtlEntityToPurchaseorderdtl(purchaseorderdtlEntitySaved)).thenReturn(purchaseorderdtlSaved);

		// When
		Purchaseorderdtl purchaseorderdtlResult = purchaseorderdtlService.create(purchaseorderdtl);

		// Then
		assertTrue(purchaseorderdtlResult == purchaseorderdtlSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Purchaseorderdtl purchaseorderdtl = purchaseorderdtlFactoryForTest.newPurchaseorderdtl();

		PurchaseorderdtlEntity purchaseorderdtlEntity = purchaseorderdtlEntityFactoryForTest.newPurchaseorderdtlEntity();
		when(purchaseorderdtlJpaRepository.findOne(purchaseorderdtl.getPurchaseorderdtlid())).thenReturn(purchaseorderdtlEntity);

		// When
		Exception exception = null;
		try {
			purchaseorderdtlService.create(purchaseorderdtl);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Purchaseorderdtl purchaseorderdtl = purchaseorderdtlFactoryForTest.newPurchaseorderdtl();

		PurchaseorderdtlEntity purchaseorderdtlEntity = purchaseorderdtlEntityFactoryForTest.newPurchaseorderdtlEntity();
		when(purchaseorderdtlJpaRepository.findOne(purchaseorderdtl.getPurchaseorderdtlid())).thenReturn(purchaseorderdtlEntity);
		
		PurchaseorderdtlEntity purchaseorderdtlEntitySaved = purchaseorderdtlEntityFactoryForTest.newPurchaseorderdtlEntity();
		when(purchaseorderdtlJpaRepository.save(purchaseorderdtlEntity)).thenReturn(purchaseorderdtlEntitySaved);
		
		Purchaseorderdtl purchaseorderdtlSaved = purchaseorderdtlFactoryForTest.newPurchaseorderdtl();
		when(purchaseorderdtlServiceMapper.mapPurchaseorderdtlEntityToPurchaseorderdtl(purchaseorderdtlEntitySaved)).thenReturn(purchaseorderdtlSaved);

		// When
		Purchaseorderdtl purchaseorderdtlResult = purchaseorderdtlService.update(purchaseorderdtl);

		// Then
		verify(purchaseorderdtlServiceMapper).mapPurchaseorderdtlToPurchaseorderdtlEntity(purchaseorderdtl, purchaseorderdtlEntity);
		assertTrue(purchaseorderdtlResult == purchaseorderdtlSaved);
	}

	@Test
	public void delete() {
		// Given
		String purchaseorderdtlid = mockValues.nextString(255);

		// When
		purchaseorderdtlService.delete(purchaseorderdtlid);

		// Then
		verify(purchaseorderdtlJpaRepository).delete(purchaseorderdtlid);
		
	}

}
