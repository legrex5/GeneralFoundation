/*
 * Created on 6 Dec 2015 ( Time 04:08:59 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import tristi.general.bean.Salesorder;
import tristi.general.bean.jpa.SalesorderEntity;

import java.util.Date;
import java.util.List;

import tristi.general.business.service.jpa.impl.SalesorderServiceImpl;
import tristi.general.business.service.jpa.mapping.SalesorderServiceMapper;
import tristi.general.data.repository.jpa.SalesorderJpaRepository;
import tristi.general.test.SalesorderFactoryForTest;
import tristi.general.test.SalesorderEntityFactoryForTest;
import tristi.general.test.MockValues;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of SalesorderService
 */
@RunWith(MockitoJUnitRunner.class)
public class SalesorderServiceImplTest {

	@InjectMocks
	private SalesorderServiceImpl salesorderService;
	@Mock
	private SalesorderJpaRepository salesorderJpaRepository;
	@Mock
	private SalesorderServiceMapper salesorderServiceMapper;
	
	private SalesorderFactoryForTest salesorderFactoryForTest = new SalesorderFactoryForTest();

	private SalesorderEntityFactoryForTest salesorderEntityFactoryForTest = new SalesorderEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String salesorderid = mockValues.nextString(255);
		
		SalesorderEntity salesorderEntity = salesorderJpaRepository.findOne(salesorderid);
		
		Salesorder salesorder = salesorderFactoryForTest.newSalesorder();
		when(salesorderServiceMapper.mapSalesorderEntityToSalesorder(salesorderEntity)).thenReturn(salesorder);

		// When
		Salesorder salesorderFound = salesorderService.findById(salesorderid);

		// Then
		assertEquals(salesorder.getSalesorderid(),salesorderFound.getSalesorderid());
	}

	@Test
	public void findAll() {
		// Given
		List<SalesorderEntity> salesorderEntitys = new ArrayList<SalesorderEntity>();
		SalesorderEntity salesorderEntity1 = salesorderEntityFactoryForTest.newSalesorderEntity();
		salesorderEntitys.add(salesorderEntity1);
		SalesorderEntity salesorderEntity2 = salesorderEntityFactoryForTest.newSalesorderEntity();
		salesorderEntitys.add(salesorderEntity2);
		when(salesorderJpaRepository.findAll()).thenReturn(salesorderEntitys);
		
		Salesorder salesorder1 = salesorderFactoryForTest.newSalesorder();
		when(salesorderServiceMapper.mapSalesorderEntityToSalesorder(salesorderEntity1)).thenReturn(salesorder1);
		Salesorder salesorder2 = salesorderFactoryForTest.newSalesorder();
		when(salesorderServiceMapper.mapSalesorderEntityToSalesorder(salesorderEntity2)).thenReturn(salesorder2);

		// When
		List<Salesorder> salesordersFounds = salesorderService.findAll();

		// Then
		assertTrue(salesorder1 == salesordersFounds.get(0));
		assertTrue(salesorder2 == salesordersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Salesorder salesorder = salesorderFactoryForTest.newSalesorder();

		SalesorderEntity salesorderEntity = salesorderEntityFactoryForTest.newSalesorderEntity();
		when(salesorderJpaRepository.findOne(salesorder.getSalesorderid())).thenReturn(null);
		
		salesorderEntity = new SalesorderEntity();
		salesorderServiceMapper.mapSalesorderToSalesorderEntity(salesorder, salesorderEntity);
		SalesorderEntity salesorderEntitySaved = salesorderJpaRepository.save(salesorderEntity);
		
		Salesorder salesorderSaved = salesorderFactoryForTest.newSalesorder();
		when(salesorderServiceMapper.mapSalesorderEntityToSalesorder(salesorderEntitySaved)).thenReturn(salesorderSaved);

		// When
		Salesorder salesorderResult = salesorderService.create(salesorder);

		// Then
		assertTrue(salesorderResult == salesorderSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Salesorder salesorder = salesorderFactoryForTest.newSalesorder();

		SalesorderEntity salesorderEntity = salesorderEntityFactoryForTest.newSalesorderEntity();
		when(salesorderJpaRepository.findOne(salesorder.getSalesorderid())).thenReturn(salesorderEntity);

		// When
		Exception exception = null;
		try {
			salesorderService.create(salesorder);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Salesorder salesorder = salesorderFactoryForTest.newSalesorder();

		SalesorderEntity salesorderEntity = salesorderEntityFactoryForTest.newSalesorderEntity();
		when(salesorderJpaRepository.findOne(salesorder.getSalesorderid())).thenReturn(salesorderEntity);
		
		SalesorderEntity salesorderEntitySaved = salesorderEntityFactoryForTest.newSalesorderEntity();
		when(salesorderJpaRepository.save(salesorderEntity)).thenReturn(salesorderEntitySaved);
		
		Salesorder salesorderSaved = salesorderFactoryForTest.newSalesorder();
		when(salesorderServiceMapper.mapSalesorderEntityToSalesorder(salesorderEntitySaved)).thenReturn(salesorderSaved);

		// When
		Salesorder salesorderResult = salesorderService.update(salesorder);

		// Then
		verify(salesorderServiceMapper).mapSalesorderToSalesorderEntity(salesorder, salesorderEntity);
		assertTrue(salesorderResult == salesorderSaved);
	}

	@Test
	public void delete() {
		// Given
		String salesorderid = mockValues.nextString(255);

		// When
		salesorderService.delete(salesorderid);

		// Then
		verify(salesorderJpaRepository).delete(salesorderid);
		
	}

}
