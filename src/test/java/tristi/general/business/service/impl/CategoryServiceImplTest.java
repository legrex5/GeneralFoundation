/*
 * Created on 6 Dec 2015 ( Time 04:08:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import tristi.general.bean.Category;
import tristi.general.bean.jpa.CategoryEntity;

import java.util.Date;
import java.util.List;
import java.util.UUID;

import tristi.general.business.service.jpa.impl.CategoryServiceImpl;
import tristi.general.business.service.jpa.mapping.CategoryServiceMapper;
import tristi.general.data.repository.jpa.CategoryJpaRepository;
import tristi.general.test.CategoryFactoryForTest;
import tristi.general.test.CategoryEntityFactoryForTest;
import tristi.general.test.MockValues;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of CategoryService
 */
@RunWith(MockitoJUnitRunner.class)
public class CategoryServiceImplTest {

	@InjectMocks
	private CategoryServiceImpl categoryService;
	@Mock
	private CategoryJpaRepository categoryJpaRepository;
	@Mock
	private CategoryServiceMapper categoryServiceMapper;
	
	private CategoryFactoryForTest categoryFactoryForTest = new CategoryFactoryForTest();

	private CategoryEntityFactoryForTest categoryEntityFactoryForTest = new CategoryEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		UUID categoryid = UUID.randomUUID();
		
		CategoryEntity categoryEntity = categoryJpaRepository.findOne(categoryid);
		
		Category category = categoryFactoryForTest.newCategory();
		when(categoryServiceMapper.mapCategoryEntityToCategory(categoryEntity)).thenReturn(category);

		// When
		Category categoryFound = categoryService.findById(categoryid.toString());

		// Then
		assertEquals(category.getCategoryid(),categoryFound.getCategoryid());
	}

	@Test
	public void findAll() {
		// Given
		List<CategoryEntity> categoryEntitys = new ArrayList<CategoryEntity>();
		CategoryEntity categoryEntity1 = categoryEntityFactoryForTest.newCategoryEntity();
		categoryEntitys.add(categoryEntity1);
		CategoryEntity categoryEntity2 = categoryEntityFactoryForTest.newCategoryEntity();
		categoryEntitys.add(categoryEntity2);
		when(categoryJpaRepository.findAll()).thenReturn(categoryEntitys);
		
		Category category1 = categoryFactoryForTest.newCategory();
		when(categoryServiceMapper.mapCategoryEntityToCategory(categoryEntity1)).thenReturn(category1);
		Category category2 = categoryFactoryForTest.newCategory();
		when(categoryServiceMapper.mapCategoryEntityToCategory(categoryEntity2)).thenReturn(category2);

		// When
		List<Category> categorysFounds = categoryService.findAll();

		// Then
		assertTrue(category1 == categorysFounds.get(0));
		assertTrue(category2 == categorysFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Category category = categoryFactoryForTest.newCategory();

		CategoryEntity categoryEntity = categoryEntityFactoryForTest.newCategoryEntity();
		when(categoryJpaRepository.findOne(UUID.fromString(category.getCategoryid()))).thenReturn(null);
		
		categoryEntity = new CategoryEntity();
		categoryServiceMapper.mapCategoryToCategoryEntity(category, categoryEntity);
		CategoryEntity categoryEntitySaved = categoryJpaRepository.save(categoryEntity);
		
		Category categorySaved = categoryFactoryForTest.newCategory();
		when(categoryServiceMapper.mapCategoryEntityToCategory(categoryEntitySaved)).thenReturn(categorySaved);

		// When
		Category categoryResult = categoryService.create(category);

		// Then
		assertTrue(categoryResult == categorySaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Category category = categoryFactoryForTest.newCategory();

		CategoryEntity categoryEntity = categoryEntityFactoryForTest.newCategoryEntity();
		when(categoryJpaRepository.findOne(UUID.fromString(category.getCategoryid()))).thenReturn(categoryEntity);

		// When
		Exception exception = null;
		try {
			categoryService.create(category);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Category category = categoryFactoryForTest.newCategory();

		CategoryEntity categoryEntity = categoryEntityFactoryForTest.newCategoryEntity();
		when(categoryJpaRepository.findOne(UUID.fromString(category.getCategoryid()))).thenReturn(categoryEntity);
		
		CategoryEntity categoryEntitySaved = categoryEntityFactoryForTest.newCategoryEntity();
		when(categoryJpaRepository.save(categoryEntity)).thenReturn(categoryEntitySaved);
		
		Category categorySaved = categoryFactoryForTest.newCategory();
		when(categoryServiceMapper.mapCategoryEntityToCategory(categoryEntitySaved)).thenReturn(categorySaved);

		// When
		Category categoryResult = categoryService.update(category);

		// Then
		verify(categoryServiceMapper).mapCategoryToCategoryEntity(category, categoryEntity);
		assertTrue(categoryResult == categorySaved);
	}

	@Test
	public void delete() {
		// Given
		UUID categoryid = UUID.randomUUID();

		// When
		categoryService.delete(categoryid.toString());

		// Then
		verify(categoryJpaRepository).delete(categoryid);
		
	}

}
