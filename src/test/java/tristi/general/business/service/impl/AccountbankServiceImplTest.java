/*
 * Created on 6 Dec 2015 ( Time 04:08:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import tristi.general.bean.Accountbank;
import tristi.general.bean.jpa.AccountbankEntity;

import java.util.Date;
import java.util.List;

import tristi.general.business.service.jpa.impl.AccountbankServiceImpl;
import tristi.general.business.service.jpa.mapping.AccountbankServiceMapper;
import tristi.general.data.repository.jpa.AccountbankJpaRepository;
import tristi.general.test.AccountbankFactoryForTest;
import tristi.general.test.AccountbankEntityFactoryForTest;
import tristi.general.test.MockValues;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of AccountbankService
 */
@RunWith(MockitoJUnitRunner.class)
public class AccountbankServiceImplTest {

	@InjectMocks
	private AccountbankServiceImpl accountbankService;
	@Mock
	private AccountbankJpaRepository accountbankJpaRepository;
	@Mock
	private AccountbankServiceMapper accountbankServiceMapper;
	
	private AccountbankFactoryForTest accountbankFactoryForTest = new AccountbankFactoryForTest();

	private AccountbankEntityFactoryForTest accountbankEntityFactoryForTest = new AccountbankEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String accountbankid = mockValues.nextString(255);
		
		AccountbankEntity accountbankEntity = accountbankJpaRepository.findOne(accountbankid);
		
		Accountbank accountbank = accountbankFactoryForTest.newAccountbank();
		when(accountbankServiceMapper.mapAccountbankEntityToAccountbank(accountbankEntity)).thenReturn(accountbank);

		// When
		Accountbank accountbankFound = accountbankService.findById(accountbankid);

		// Then
		assertEquals(accountbank.getAccountbankid(),accountbankFound.getAccountbankid());
	}

	@Test
	public void findAll() {
		// Given
//		List<AccountbankEntity> accountbankEntitys = new ArrayList<AccountbankEntity>();
//		AccountbankEntity accountbankEntity1 = accountbankEntityFactoryForTest.newAccountbankEntity();
//		accountbankEntitys.add(accountbankEntity1);
//		AccountbankEntity accountbankEntity2 = accountbankEntityFactoryForTest.newAccountbankEntity();
//		accountbankEntitys.add(accountbankEntity2);
//		when(accountbankJpaRepository.findAll()).thenReturn(accountbankEntitys);
//		
//		Accountbank accountbank1 = accountbankFactoryForTest.newAccountbank();
//		when(accountbankServiceMapper.mapAccountbankEntityToAccountbank(accountbankEntity1)).thenReturn(accountbank1);
//		Accountbank accountbank2 = accountbankFactoryForTest.newAccountbank();
//		when(accountbankServiceMapper.mapAccountbankEntityToAccountbank(accountbankEntity2)).thenReturn(accountbank2);

		// When
//		List<Accountbank> accountbanksFounds = accountbankService.findAll();

		// Then
//		assertTrue(accountbank1 == accountbanksFounds.get(0));
//		assertTrue(accountbank2 == accountbanksFounds.get(1));
	}

	@Test
	public void create() {
		// Given
//		Accountbank accountbank = accountbankFactoryForTest.newAccountbank();
//
//		AccountbankEntity accountbankEntity = accountbankEntityFactoryForTest.newAccountbankEntity();
//		when(accountbankJpaRepository.findOne(accountbank.getAccountbankid())).thenReturn(null);
//		
//		accountbankEntity = new AccountbankEntity();
//		accountbankServiceMapper.mapAccountbankToAccountbankEntity(accountbank, accountbankEntity);
//		AccountbankEntity accountbankEntitySaved = accountbankJpaRepository.save(accountbankEntity);
//		
//		Accountbank accountbankSaved = accountbankFactoryForTest.newAccountbank();
//		when(accountbankServiceMapper.mapAccountbankEntityToAccountbank(accountbankEntitySaved)).thenReturn(accountbankSaved);

		// When
//		Accountbank accountbankResult = accountbankService.create(accountbank);

		// Then
//		assertTrue(accountbankResult == accountbankSaved);
	}

	@Test
	public void createKOExists() {
		// Given
//		Accountbank accountbank = accountbankFactoryForTest.newAccountbank();
//
//		AccountbankEntity accountbankEntity = accountbankEntityFactoryForTest.newAccountbankEntity();
//		when(accountbankJpaRepository.findOne(accountbank.getAccountbankid())).thenReturn(accountbankEntity);

		// When
//		Exception exception = null;
//		try {
//			accountbankService.create(accountbank);
//		} catch(Exception e) {
//			exception = e;
//		}

		// Then
//		assertTrue(exception instanceof IllegalStateException);
//		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
//		Accountbank accountbank = accountbankFactoryForTest.newAccountbank();
//
//		AccountbankEntity accountbankEntity = accountbankEntityFactoryForTest.newAccountbankEntity();
//		when(accountbankJpaRepository.findOne(accountbank.getAccountbankid())).thenReturn(accountbankEntity);
//		
//		AccountbankEntity accountbankEntitySaved = accountbankEntityFactoryForTest.newAccountbankEntity();
//		when(accountbankJpaRepository.save(accountbankEntity)).thenReturn(accountbankEntitySaved);
//		
//		Accountbank accountbankSaved = accountbankFactoryForTest.newAccountbank();
//		when(accountbankServiceMapper.mapAccountbankEntityToAccountbank(accountbankEntitySaved)).thenReturn(accountbankSaved);

		// When
//		Accountbank accountbankResult = accountbankService.update(accountbank);

		// Then
//		verify(accountbankServiceMapper).mapAccountbankToAccountbankEntity(accountbank, accountbankEntity);
//		assertTrue(accountbankResult == accountbankSaved);
	}

	@Test
	public void delete() {
		// Given
		String accountbankid = mockValues.nextString(255);

		// When
		accountbankService.delete(accountbankid);

		// Then
		verify(accountbankJpaRepository).delete(accountbankid);
		
	}

}
