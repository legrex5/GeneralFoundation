/*
 * Created on 6 Dec 2015 ( Time 04:09:00 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import tristi.general.bean.Uom;
import tristi.general.bean.jpa.UomEntity;

import java.util.Date;
import java.util.List;

import tristi.general.business.service.jpa.impl.UomServiceImpl;
import tristi.general.business.service.jpa.mapping.UomServiceMapper;
import tristi.general.data.repository.jpa.UomJpaRepository;
import tristi.general.test.UomFactoryForTest;
import tristi.general.test.UomEntityFactoryForTest;
import tristi.general.test.MockValues;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of UomService
 */
@RunWith(MockitoJUnitRunner.class)
public class UomServiceImplTest {

	@InjectMocks
	private UomServiceImpl uomService;
	@Mock
	private UomJpaRepository uomJpaRepository;
	@Mock
	private UomServiceMapper uomServiceMapper;
	
	private UomFactoryForTest uomFactoryForTest = new UomFactoryForTest();

	private UomEntityFactoryForTest uomEntityFactoryForTest = new UomEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String uomid = mockValues.nextString(255);
		
		UomEntity uomEntity = uomJpaRepository.findOne(uomid);
		
		Uom uom = uomFactoryForTest.newUom();
		when(uomServiceMapper.mapUomEntityToUom(uomEntity)).thenReturn(uom);

		// When
		Uom uomFound = uomService.findById(uomid);

		// Then
		assertEquals(uom.getUomid(),uomFound.getUomid());
	}

	@Test
	public void findAll() {
		// Given
		List<UomEntity> uomEntitys = new ArrayList<UomEntity>();
		UomEntity uomEntity1 = uomEntityFactoryForTest.newUomEntity();
		uomEntitys.add(uomEntity1);
		UomEntity uomEntity2 = uomEntityFactoryForTest.newUomEntity();
		uomEntitys.add(uomEntity2);
		when(uomJpaRepository.findAll()).thenReturn(uomEntitys);
		
		Uom uom1 = uomFactoryForTest.newUom();
		when(uomServiceMapper.mapUomEntityToUom(uomEntity1)).thenReturn(uom1);
		Uom uom2 = uomFactoryForTest.newUom();
		when(uomServiceMapper.mapUomEntityToUom(uomEntity2)).thenReturn(uom2);

		// When
		List<Uom> uomsFounds = uomService.findAll();

		// Then
		assertTrue(uom1 == uomsFounds.get(0));
		assertTrue(uom2 == uomsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Uom uom = uomFactoryForTest.newUom();

		UomEntity uomEntity = uomEntityFactoryForTest.newUomEntity();
		when(uomJpaRepository.findOne(uom.getUomid())).thenReturn(null);
		
		uomEntity = new UomEntity();
		uomServiceMapper.mapUomToUomEntity(uom, uomEntity);
		UomEntity uomEntitySaved = uomJpaRepository.save(uomEntity);
		
		Uom uomSaved = uomFactoryForTest.newUom();
		when(uomServiceMapper.mapUomEntityToUom(uomEntitySaved)).thenReturn(uomSaved);

		// When
		Uom uomResult = uomService.create(uom);

		// Then
		assertTrue(uomResult == uomSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Uom uom = uomFactoryForTest.newUom();

		UomEntity uomEntity = uomEntityFactoryForTest.newUomEntity();
		when(uomJpaRepository.findOne(uom.getUomid())).thenReturn(uomEntity);

		// When
		Exception exception = null;
		try {
			uomService.create(uom);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Uom uom = uomFactoryForTest.newUom();

		UomEntity uomEntity = uomEntityFactoryForTest.newUomEntity();
		when(uomJpaRepository.findOne(uom.getUomid())).thenReturn(uomEntity);
		
		UomEntity uomEntitySaved = uomEntityFactoryForTest.newUomEntity();
		when(uomJpaRepository.save(uomEntity)).thenReturn(uomEntitySaved);
		
		Uom uomSaved = uomFactoryForTest.newUom();
		when(uomServiceMapper.mapUomEntityToUom(uomEntitySaved)).thenReturn(uomSaved);

		// When
		Uom uomResult = uomService.update(uom);

		// Then
		verify(uomServiceMapper).mapUomToUomEntity(uom, uomEntity);
		assertTrue(uomResult == uomSaved);
	}

	@Test
	public void delete() {
		// Given
		String uomid = mockValues.nextString(255);

		// When
		uomService.delete(uomid);

		// Then
		verify(uomJpaRepository).delete(uomid);
		
	}

}
