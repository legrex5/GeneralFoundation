/*
 * Created on 6 Dec 2015 ( Time 04:08:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import tristi.general.bean.Locationdtl;
import tristi.general.bean.jpa.LocationdtlEntity;

import java.util.Date;
import java.util.List;

import tristi.general.business.service.jpa.impl.LocationdtlServiceImpl;
import tristi.general.business.service.jpa.mapping.LocationdtlServiceMapper;
import tristi.general.data.repository.jpa.LocationdtlJpaRepository;
import tristi.general.test.LocationdtlFactoryForTest;
import tristi.general.test.LocationdtlEntityFactoryForTest;
import tristi.general.test.MockValues;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of LocationdtlService
 */
@RunWith(MockitoJUnitRunner.class)
public class LocationdtlServiceImplTest {

	@InjectMocks
	private LocationdtlServiceImpl locationdtlService;
	@Mock
	private LocationdtlJpaRepository locationdtlJpaRepository;
	@Mock
	private LocationdtlServiceMapper locationdtlServiceMapper;
	
	private LocationdtlFactoryForTest locationdtlFactoryForTest = new LocationdtlFactoryForTest();

	private LocationdtlEntityFactoryForTest locationdtlEntityFactoryForTest = new LocationdtlEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String locationdtlid = mockValues.nextString(255);
		
		LocationdtlEntity locationdtlEntity = locationdtlJpaRepository.findOne(locationdtlid);
		
		Locationdtl locationdtl = locationdtlFactoryForTest.newLocationdtl();
		when(locationdtlServiceMapper.mapLocationdtlEntityToLocationdtl(locationdtlEntity)).thenReturn(locationdtl);

		// When
		Locationdtl locationdtlFound = locationdtlService.findById(locationdtlid);

		// Then
		assertEquals(locationdtl.getLocationdtlid(),locationdtlFound.getLocationdtlid());
	}

	@Test
	public void findAll() {
		// Given
		List<LocationdtlEntity> locationdtlEntitys = new ArrayList<LocationdtlEntity>();
		LocationdtlEntity locationdtlEntity1 = locationdtlEntityFactoryForTest.newLocationdtlEntity();
		locationdtlEntitys.add(locationdtlEntity1);
		LocationdtlEntity locationdtlEntity2 = locationdtlEntityFactoryForTest.newLocationdtlEntity();
		locationdtlEntitys.add(locationdtlEntity2);
		when(locationdtlJpaRepository.findAll()).thenReturn(locationdtlEntitys);
		
		Locationdtl locationdtl1 = locationdtlFactoryForTest.newLocationdtl();
		when(locationdtlServiceMapper.mapLocationdtlEntityToLocationdtl(locationdtlEntity1)).thenReturn(locationdtl1);
		Locationdtl locationdtl2 = locationdtlFactoryForTest.newLocationdtl();
		when(locationdtlServiceMapper.mapLocationdtlEntityToLocationdtl(locationdtlEntity2)).thenReturn(locationdtl2);

		// When
		List<Locationdtl> locationdtlsFounds = locationdtlService.findAll();

		// Then
		assertTrue(locationdtl1 == locationdtlsFounds.get(0));
		assertTrue(locationdtl2 == locationdtlsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Locationdtl locationdtl = locationdtlFactoryForTest.newLocationdtl();

		LocationdtlEntity locationdtlEntity = locationdtlEntityFactoryForTest.newLocationdtlEntity();
		when(locationdtlJpaRepository.findOne(locationdtl.getLocationdtlid())).thenReturn(null);
		
		locationdtlEntity = new LocationdtlEntity();
		locationdtlServiceMapper.mapLocationdtlToLocationdtlEntity(locationdtl, locationdtlEntity);
		LocationdtlEntity locationdtlEntitySaved = locationdtlJpaRepository.save(locationdtlEntity);
		
		Locationdtl locationdtlSaved = locationdtlFactoryForTest.newLocationdtl();
		when(locationdtlServiceMapper.mapLocationdtlEntityToLocationdtl(locationdtlEntitySaved)).thenReturn(locationdtlSaved);

		// When
		Locationdtl locationdtlResult = locationdtlService.create(locationdtl);

		// Then
		assertTrue(locationdtlResult == locationdtlSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Locationdtl locationdtl = locationdtlFactoryForTest.newLocationdtl();

		LocationdtlEntity locationdtlEntity = locationdtlEntityFactoryForTest.newLocationdtlEntity();
		when(locationdtlJpaRepository.findOne(locationdtl.getLocationdtlid())).thenReturn(locationdtlEntity);

		// When
		Exception exception = null;
		try {
			locationdtlService.create(locationdtl);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Locationdtl locationdtl = locationdtlFactoryForTest.newLocationdtl();

		LocationdtlEntity locationdtlEntity = locationdtlEntityFactoryForTest.newLocationdtlEntity();
		when(locationdtlJpaRepository.findOne(locationdtl.getLocationdtlid())).thenReturn(locationdtlEntity);
		
		LocationdtlEntity locationdtlEntitySaved = locationdtlEntityFactoryForTest.newLocationdtlEntity();
		when(locationdtlJpaRepository.save(locationdtlEntity)).thenReturn(locationdtlEntitySaved);
		
		Locationdtl locationdtlSaved = locationdtlFactoryForTest.newLocationdtl();
		when(locationdtlServiceMapper.mapLocationdtlEntityToLocationdtl(locationdtlEntitySaved)).thenReturn(locationdtlSaved);

		// When
		Locationdtl locationdtlResult = locationdtlService.update(locationdtl);

		// Then
		verify(locationdtlServiceMapper).mapLocationdtlToLocationdtlEntity(locationdtl, locationdtlEntity);
		assertTrue(locationdtlResult == locationdtlSaved);
	}

	@Test
	public void delete() {
		// Given
		String locationdtlid = mockValues.nextString(255);

		// When
		locationdtlService.delete(locationdtlid);

		// Then
		verify(locationdtlJpaRepository).delete(locationdtlid);
		
	}

}
