/*
 * Created on 6 Dec 2015 ( Time 04:08:59 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import tristi.general.bean.Returnsupplier;
import tristi.general.bean.jpa.ReturnsupplierEntity;

import java.util.Date;
import java.util.List;

import tristi.general.business.service.jpa.impl.ReturnsupplierServiceImpl;
import tristi.general.business.service.jpa.mapping.ReturnsupplierServiceMapper;
import tristi.general.data.repository.jpa.ReturnsupplierJpaRepository;
import tristi.general.test.ReturnsupplierFactoryForTest;
import tristi.general.test.ReturnsupplierEntityFactoryForTest;
import tristi.general.test.MockValues;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ReturnsupplierService
 */
@RunWith(MockitoJUnitRunner.class)
public class ReturnsupplierServiceImplTest {

	@InjectMocks
	private ReturnsupplierServiceImpl returnsupplierService;
	@Mock
	private ReturnsupplierJpaRepository returnsupplierJpaRepository;
	@Mock
	private ReturnsupplierServiceMapper returnsupplierServiceMapper;
	
	private ReturnsupplierFactoryForTest returnsupplierFactoryForTest = new ReturnsupplierFactoryForTest();

	private ReturnsupplierEntityFactoryForTest returnsupplierEntityFactoryForTest = new ReturnsupplierEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String returnsupplierid = mockValues.nextString(255);
		
		ReturnsupplierEntity returnsupplierEntity = returnsupplierJpaRepository.findOne(returnsupplierid);
		
		Returnsupplier returnsupplier = returnsupplierFactoryForTest.newReturnsupplier();
		when(returnsupplierServiceMapper.mapReturnsupplierEntityToReturnsupplier(returnsupplierEntity)).thenReturn(returnsupplier);

		// When
		Returnsupplier returnsupplierFound = returnsupplierService.findById(returnsupplierid);

		// Then
		assertEquals(returnsupplier.getReturnsupplierid(),returnsupplierFound.getReturnsupplierid());
	}

	@Test
	public void findAll() {
		// Given
		List<ReturnsupplierEntity> returnsupplierEntitys = new ArrayList<ReturnsupplierEntity>();
		ReturnsupplierEntity returnsupplierEntity1 = returnsupplierEntityFactoryForTest.newReturnsupplierEntity();
		returnsupplierEntitys.add(returnsupplierEntity1);
		ReturnsupplierEntity returnsupplierEntity2 = returnsupplierEntityFactoryForTest.newReturnsupplierEntity();
		returnsupplierEntitys.add(returnsupplierEntity2);
		when(returnsupplierJpaRepository.findAll()).thenReturn(returnsupplierEntitys);
		
		Returnsupplier returnsupplier1 = returnsupplierFactoryForTest.newReturnsupplier();
		when(returnsupplierServiceMapper.mapReturnsupplierEntityToReturnsupplier(returnsupplierEntity1)).thenReturn(returnsupplier1);
		Returnsupplier returnsupplier2 = returnsupplierFactoryForTest.newReturnsupplier();
		when(returnsupplierServiceMapper.mapReturnsupplierEntityToReturnsupplier(returnsupplierEntity2)).thenReturn(returnsupplier2);

		// When
		List<Returnsupplier> returnsuppliersFounds = returnsupplierService.findAll();

		// Then
		assertTrue(returnsupplier1 == returnsuppliersFounds.get(0));
		assertTrue(returnsupplier2 == returnsuppliersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Returnsupplier returnsupplier = returnsupplierFactoryForTest.newReturnsupplier();

		ReturnsupplierEntity returnsupplierEntity = returnsupplierEntityFactoryForTest.newReturnsupplierEntity();
		when(returnsupplierJpaRepository.findOne(returnsupplier.getReturnsupplierid())).thenReturn(null);
		
		returnsupplierEntity = new ReturnsupplierEntity();
		returnsupplierServiceMapper.mapReturnsupplierToReturnsupplierEntity(returnsupplier, returnsupplierEntity);
		ReturnsupplierEntity returnsupplierEntitySaved = returnsupplierJpaRepository.save(returnsupplierEntity);
		
		Returnsupplier returnsupplierSaved = returnsupplierFactoryForTest.newReturnsupplier();
		when(returnsupplierServiceMapper.mapReturnsupplierEntityToReturnsupplier(returnsupplierEntitySaved)).thenReturn(returnsupplierSaved);

		// When
		Returnsupplier returnsupplierResult = returnsupplierService.create(returnsupplier);

		// Then
		assertTrue(returnsupplierResult == returnsupplierSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Returnsupplier returnsupplier = returnsupplierFactoryForTest.newReturnsupplier();

		ReturnsupplierEntity returnsupplierEntity = returnsupplierEntityFactoryForTest.newReturnsupplierEntity();
		when(returnsupplierJpaRepository.findOne(returnsupplier.getReturnsupplierid())).thenReturn(returnsupplierEntity);

		// When
		Exception exception = null;
		try {
			returnsupplierService.create(returnsupplier);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Returnsupplier returnsupplier = returnsupplierFactoryForTest.newReturnsupplier();

		ReturnsupplierEntity returnsupplierEntity = returnsupplierEntityFactoryForTest.newReturnsupplierEntity();
		when(returnsupplierJpaRepository.findOne(returnsupplier.getReturnsupplierid())).thenReturn(returnsupplierEntity);
		
		ReturnsupplierEntity returnsupplierEntitySaved = returnsupplierEntityFactoryForTest.newReturnsupplierEntity();
		when(returnsupplierJpaRepository.save(returnsupplierEntity)).thenReturn(returnsupplierEntitySaved);
		
		Returnsupplier returnsupplierSaved = returnsupplierFactoryForTest.newReturnsupplier();
		when(returnsupplierServiceMapper.mapReturnsupplierEntityToReturnsupplier(returnsupplierEntitySaved)).thenReturn(returnsupplierSaved);

		// When
		Returnsupplier returnsupplierResult = returnsupplierService.update(returnsupplier);

		// Then
		verify(returnsupplierServiceMapper).mapReturnsupplierToReturnsupplierEntity(returnsupplier, returnsupplierEntity);
		assertTrue(returnsupplierResult == returnsupplierSaved);
	}

	@Test
	public void delete() {
		// Given
		String returnsupplierid = mockValues.nextString(255);

		// When
		returnsupplierService.delete(returnsupplierid);

		// Then
		verify(returnsupplierJpaRepository).delete(returnsupplierid);
		
	}

}
