/*
 * Created on 6 Dec 2015 ( Time 04:08:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package tristi.general.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import tristi.general.bean.Bank;
import tristi.general.bean.jpa.BankEntity;

import java.util.Date;
import java.util.List;

import tristi.general.business.service.jpa.impl.BankServiceImpl;
import tristi.general.business.service.jpa.mapping.BankServiceMapper;
import tristi.general.data.repository.jpa.BankJpaRepository;
import tristi.general.test.BankFactoryForTest;
import tristi.general.test.BankEntityFactoryForTest;
import tristi.general.test.MockValues;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of BankService
 */
@RunWith(MockitoJUnitRunner.class)
public class BankServiceImplTest {

	@InjectMocks
	private BankServiceImpl bankService;
	@Mock
	private BankJpaRepository bankJpaRepository;
	@Mock
	private BankServiceMapper bankServiceMapper;
	
	private BankFactoryForTest bankFactoryForTest = new BankFactoryForTest();

	private BankEntityFactoryForTest bankEntityFactoryForTest = new BankEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String bankid = mockValues.nextString(255);
		
		BankEntity bankEntity = bankJpaRepository.findOne(bankid);
		
		Bank bank = bankFactoryForTest.newBank();
		when(bankServiceMapper.mapBankEntityToBank(bankEntity)).thenReturn(bank);

		// When
		Bank bankFound = bankService.findById(bankid);

		// Then
		assertEquals(bank.getBankid(),bankFound.getBankid());
	}

	@Test
	public void findAll() {
		// Given
		List<BankEntity> bankEntitys = new ArrayList<BankEntity>();
		BankEntity bankEntity1 = bankEntityFactoryForTest.newBankEntity();
		bankEntitys.add(bankEntity1);
		BankEntity bankEntity2 = bankEntityFactoryForTest.newBankEntity();
		bankEntitys.add(bankEntity2);
		when(bankJpaRepository.findAll()).thenReturn(bankEntitys);
		
		Bank bank1 = bankFactoryForTest.newBank();
		when(bankServiceMapper.mapBankEntityToBank(bankEntity1)).thenReturn(bank1);
		Bank bank2 = bankFactoryForTest.newBank();
		when(bankServiceMapper.mapBankEntityToBank(bankEntity2)).thenReturn(bank2);

		// When
		List<Bank> banksFounds = bankService.findAll();

		// Then
		assertTrue(bank1 == banksFounds.get(0));
		assertTrue(bank2 == banksFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Bank bank = bankFactoryForTest.newBank();

		BankEntity bankEntity = bankEntityFactoryForTest.newBankEntity();
		when(bankJpaRepository.findOne(bank.getBankid())).thenReturn(null);
		
		bankEntity = new BankEntity();
		bankServiceMapper.mapBankToBankEntity(bank, bankEntity);
		BankEntity bankEntitySaved = bankJpaRepository.save(bankEntity);
		
		Bank bankSaved = bankFactoryForTest.newBank();
		when(bankServiceMapper.mapBankEntityToBank(bankEntitySaved)).thenReturn(bankSaved);

		// When
		Bank bankResult = bankService.create(bank);

		// Then
		assertTrue(bankResult == bankSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Bank bank = bankFactoryForTest.newBank();

		BankEntity bankEntity = bankEntityFactoryForTest.newBankEntity();
		when(bankJpaRepository.findOne(bank.getBankid())).thenReturn(bankEntity);

		// When
		Exception exception = null;
		try {
			bankService.create(bank);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Bank bank = bankFactoryForTest.newBank();

		BankEntity bankEntity = bankEntityFactoryForTest.newBankEntity();
		when(bankJpaRepository.findOne(bank.getBankid())).thenReturn(bankEntity);
		
		BankEntity bankEntitySaved = bankEntityFactoryForTest.newBankEntity();
		when(bankJpaRepository.save(bankEntity)).thenReturn(bankEntitySaved);
		
		Bank bankSaved = bankFactoryForTest.newBank();
		when(bankServiceMapper.mapBankEntityToBank(bankEntitySaved)).thenReturn(bankSaved);

		// When
		Bank bankResult = bankService.update(bank);

		// Then
		verify(bankServiceMapper).mapBankToBankEntity(bank, bankEntity);
		assertTrue(bankResult == bankSaved);
	}

	@Test
	public void delete() {
		// Given
		String bankid = mockValues.nextString(255);

		// When
		bankService.delete(bankid);

		// Then
		verify(bankJpaRepository).delete(bankid);
		
	}

}
